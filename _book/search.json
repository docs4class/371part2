[{"path":"index.html","id":"introduction","chapter":"1 Introduction","heading":"1 Introduction","text":"book written contains materials lessons BADM 371 Intro Data Analytics. miss day, want review something covered class, reason want look worksheet, can go.chapter contains different topic cover semester. larger topics split two chapters make accessing materials little intuitive.book updated automatically changes made documents semester, point told change assignment, can come get updated version.Also, book benefited greatly lots free, readily available resources posted web leverage extensively. encourage review resources analytics journey. specifically use great frequency (say loud THANK authors!):R Data ScienceAn Introduction Statistical Learning Applications RR: self-learn tutorialData Science Boxstackoverflow.com, example","code":""},{"path":"syllabus.html","id":"syllabus","chapter":"2 Syllabus","heading":"2 Syllabus","text":"Instructor: Tobin TurnerOffice Hours: mutually convenient time arranged email e-mail: jtturner@presby.edu","code":""},{"path":"syllabus.html","id":"course-objectives-and-learning-outcomes","chapter":"2 Syllabus","heading":"2.1 Course Objectives and Learning Outcomes","text":"course designed introduce data science. Students apply statistical knowledge techniques business non-business contexts.end course students able :Demonstrate mastery statistical software R Rstudio IDE.Data wrangle (process cleaning unifying messy complex data sets easy access analysis)Demonstrate mastery single multiple regression.Demonstrate mastery dplyr functions: filter, select, mutate, group_by, summaize, tally.Demonstrate mastery business analytics related business functions important success business entity.course focused understanding applying key business analytical concepts. Although text serves useful foundation concepts covered class, simple memorization material text sufficient. Class participation, discussion, application critical.","code":""},{"path":"syllabus.html","id":"text-and-resources","chapter":"2 Syllabus","heading":"2.2 Text and Resources","text":"course website (primary reource)Introduction Statistical Learning Applications R; Gareth James, Daniela Witten, Trevor Hastie Robert TibshiraniR: self-learn tutorial.free, publicly available datasets publications.","code":""},{"path":"syllabus.html","id":"performance-evaluation-grading","chapter":"2 Syllabus","heading":"2.3 Performance Evaluation (Grading)","text":"Quizzes Assignments - 20%Exam 1 - 20%Exam 2 - 20%Exam 3 - 20%Final Exam - 20%","code":""},{"path":"syllabus.html","id":"exams","chapter":"2 Syllabus","heading":"2.3.1 Exams","text":"Exams cover assigned chapters textbook, assigned readings, lectures, class exercises, class discussions, videos, guest speakers. typically allocate time prior exam clearly identify body knowledge test cover answer questions format objectives exam.","code":""},{"path":"syllabus.html","id":"quizzes-dont-miss-class","chapter":"2 Syllabus","heading":"2.3.2 Quizzes – DON”T MISS CLASS","text":"average quizzes assignments comprise Quizzes Assignments - 20% portion final gradeQuizzes designed prepare exams ensure stay wiht course materialMissed quizzes made later. present.Quizzes rule. LISTEN.","code":""},{"path":"syllabus.html","id":"final-average","chapter":"2 Syllabus","heading":"2.3.3 Final Average","text":"Final Average Grade\n90-100 \n88-89 B+\n82-87 B+\n80-81 B-\n78-79 C+\n72-77 C+\n70-71 C-\n60-69 D\n59 F\n90-100 A88-89 B+82-87 B+80-81 B-78-79 C+72-77 C+70-71 C-60-69 D59 F","code":""},{"path":"syllabus.html","id":"class-participation","chapter":"2 Syllabus","heading":"2.4 Class Participation:","text":"frequently give readings assignments complete prior next class meeting. expect fully engage material: answer questions, pose questions, provide insightful observations. Keep mind quality important component “participation.” Periodic cold calls take place. also put students “hot seat” occasion. class sessions, may select random group students lead us discussion debate. selection participants announced class begins, everyone expected prepare discussion. Reading assigned chapters articles best way prepare discussion. concerns called class, please see discuss. purpose “hot seat” stress embarrass students, encourage students actively engage material.","code":""},{"path":"syllabus.html","id":"phones","chapter":"2 Syllabus","heading":"2.5 Phones","text":"Phones allowed used class without instructor’s prior consent. need phone class please let know class. Unauthorized use electronic devices may result lowering grade dismissal class. mean .phone thing? mean .","code":""},{"path":"syllabus.html","id":"attendance","chapter":"2 Syllabus","heading":"2.6 Attendance","text":"expected regular punctual class attendance. Students responsible material missed homework assignments made. class missed, notes/homework obtained another student. 15 minutes late, class considered cancelled. 4 absences allowed semester. Exceeding absence policy may result receiving F course. professors roll official roll students present roll taken counted absent. student must miss exam, must work agreeable time instructor take test prior exam given. student misses test due emergency, student must inform instructor soon possible. special cases, instructor may allow student take make-exam.","code":""},{"path":"syllabus.html","id":"accommodations","chapter":"2 Syllabus","heading":"2.7 Accommodations","text":"Presbyterian College committed providing reasonable accommodations students documented disabilities. seeking academic accommodations Americans Disabilities Act, must register Academic Success Office, located 5th Avenue (beside Campus Police). receive accommodations, please obtain proper Accommodations Approval Form office, meet beginning semester discuss may deliver approved accommodations. especially encourage meet well advance actual accommodations provided, may feasible offer immediate accommodations without sufficient advance notice (case tests). can assure discussions remain confidential. Disability Services information located link http://bit.ly/PCdisabilityservicesAdditionally, student’s responsibility give instructor one week’s notice prior instance accommodation required.","code":""},{"path":"syllabus.html","id":"honor-code-and-plagiarism","chapter":"2 Syllabus","heading":"2.8 Honor Code and Plagiarism:","text":"assignments/exams must work. copying use unauthorized assistance treated violation PC’s Honor Code. unsure resources allowed, please ask. Please note text longer 7 words taken source must placed quotations cited. Also, summarizing source must also cited. Using source showing work violation plagiarism honor code.","code":""},{"path":"syllabus.html","id":"first-generation-version","chapter":"2 Syllabus","heading":"2.9 First-Generation Version:","text":"Presby First+ Advocate. support current first-generation students. Presbyterian College, first-generation students neither parent legal guardian graduated four-year higher education institution bachelor’s degree. first-generation college student, please contact . information support first-generation college students campus visit Presby First+ webpage.","code":""},{"path":"syllabus.html","id":"continuing-advocate-version","chapter":"2 Syllabus","heading":"2.10 Continuing Advocate Version","text":"Presby First+ Advocate. committed supporting first-generation students Presbyterian College. Presbyterian College, first-generation students neither parent legal guardian graduated four-year higher education institution bachelor’s degree. first-generation college student, please contact anytime visit office hours. information support first-generation college students campus visit Presby First+ webpage.","code":""},{"path":"our-class-rhythm.html","id":"our-class-rhythm","chapter":"3 Our Class Rhythm","heading":"3 Our Class Rhythm","text":"Monday: Wrap previous topic introduce ’ve pre-read . Chat. Play. Work examples. Make sure topics applies real-life.Wednesday: Work examples. Chat needed. Live best lives. :).Friday: Apply ’ve learned – demonstrate mastery (typically form quiz, lab, assignment). Rinse. Repeat.","code":""},{"path":"end-in-mind.html","id":"end-in-mind","chapter":"4 End in Mind","heading":"4 End in Mind","text":"Dana Simmons: “Can predict students enroll PC?”Christina Miller: ??? Well, can ? ???","code":""},{"path":"schedule.html","id":"schedule","chapter":"5 Schedule","heading":"5 Schedule","text":"tentative schedule, best stick , may plan accordingly!","code":""},{"path":"schedule.html","id":"spring-2022","chapter":"5 Schedule","heading":"Spring 2022","text":"","code":""},{"path":"elephant-in-the-room-r.html","id":"elephant-in-the-room-r","chapter":"6 Elephant in the room: R","heading":"6 Elephant in the room: R","text":"variety different applications R. Yes, obvious ones things machine learning, artificial intelligence, data mining. However, possibilities program honestly limitless.","code":""},{"path":"elephant-in-the-room-r.html","id":"the-bad-news","chapter":"6 Elephant in the room: R","heading":"6.1 The bad news","text":"“bad news whenever ’re learning new tool, long time ’re going suck. ’s going frustrating. , good news typical, ’s something happens everyone, ’s temporary … [T]way go knowing nothing subject knowing something subject expert without going period great frustration.”– Hadley Wickham","code":""},{"path":"elephant-in-the-room-r.html","id":"about-r","chapter":"6 Elephant in the room: R","heading":"6.2 About R","text":"R software language carrying complicated (simple) statistical analyses. includes routines data summary exploration, graphical presentation data modelling.","code":""},{"path":"r-vs.-excel.html","id":"r-vs.-excel","chapter":"7 R vs. Excel","heading":"7 R vs. Excel","text":"","code":""},{"path":"r-vs.-excel.html","id":"both-are-useful","chapter":"7 R vs. Excel","heading":"7.1 Both are useful","text":"Data analytics increasingly important components decision-making business. Whether ’re part marketing team needs generate visuals highlight industry trends, ’re looking generate financial statements, need analytics program help develop reports effectively communicate findings.R Excel excellent data analytics tools, distinct functionality.Please make sure can explain distinct functions R Excel! NEED KNOW !Excel well-known software program included Microsoft Office Suite. Used create spreadsheets, execute calculations, produce charts, perform statistical analysis, Excel used many professionals across variety industries. PC’s BADM 299 prepares well using Excel.R free, open-source programming language software environment ’s frequently used big data analysis statistical computing. R many advanced functions capabilities.","code":""},{"path":"r-vs.-excel.html","id":"differences-between-r-and-excel","chapter":"7 R vs. Excel","heading":"7.2 Differences Between R and Excel","text":"choosing R Excel, ’s important understand either software can get results need. key differences R Excel help decide makes sense use.","code":""},{"path":"r-vs.-excel.html","id":"ease-of-use-learning-the-software","chapter":"7 R vs. Excel","heading":"7.3 Ease of Use & Learning the Software","text":"people likely already learned least basic tips Microsoft Excel. ’s one substantial benefit using Excel—initial learning curve quite minimal, analysis can done via point--click top panel. user imports data program, ’s hard make basic graphs charts.R programming language, however, meaning initial learning curve steeper. take least weeks familiarize interface master various functions. Luckily, using R can quickly become second-nature practice.","code":""},{"path":"r-vs.-excel.html","id":"replicating-analysis","chapter":"7 R vs. Excel","heading":"7.4 Replicating Analysis","text":"R, less user-friendly intimidating user interface, capability reproduce analyses repeatedly different datasets. can incredibly helpful large projects multiple data sets, ’ll keep everything consistent clean, without rewrite script time.Since Excel’s user interface point--click, ’ll need rely memory repetition frequently. import codes scripts R, ’ll “reinvent wheel” perform analysis across different data sets. detrimental basic statistics, may become time-consuming complicated analyses.example, let’s say thoroughly analyzed analytics 1 football season. R (vs Excel) help quickly analyze new season’s data?","code":""},{"path":"r-vs.-excel.html","id":"visualization","chapter":"7 R vs. Excel","heading":"7.5 Visualization","text":"deciding R Excel, ask , “detailed visualizations need order achieve goal(s)?” Excel, example, can quickly highlight group cells make simple chart PowerPoint. need comprehensive graph, however, R may best bet. R can produce incredibly attractive, detailed visuals can help stakeholders understand findings.comes need graphics . ’re just looking cobble together quick--dirty presentation visualize data coworkers, making simple straightforward charts Excel suffice. planning publish large amounts complicated data various stakeholders, spending time R create impressive interactive visual representations likely worth .example, ’s example pretty easy visualization R challenging (update) Excel.","code":""},{"path":"r-vs.-excel.html","id":"packages","chapter":"7 R vs. Excel","heading":"7.6 Packages","text":"R, fundamental unit shareable code package. package bundles together code, data, documentation, tests, easy share others. June 2019, 14,000 packages available Comprehensive R Archive Network, CRAN, public clearing house R packages. huge variety packages one reasons R successful: chances someone already solved problem ’re working , can benefit work downloading package.packages useful even never share code. Hilary Parker says introduction packages: “Seriously, doesn’t sharing code (although added benefit!). saving time.” Organising code package makes life easier packages come conventions. example, put R code R/, put tests tests/ put data data/. conventions helpful :save time — don’t need think best way organise project, can just follow template.Standardized conventions lead standardized tools — buy R’s package conventions, get many tools free.chat packages, fun check links …","code":""},{"path":"r-vs.-excel.html","id":"careers","chapter":"7 R vs. Excel","heading":"7.7 Careers","text":"Aptitude Excel R incredibly valuable competencies -demand across variety industries. Countless jobs looking applicants least Excel experience (pivot tables look really good resumé), R higher earning potential -demand Excel.R one popular programming languages industry-standard data analytics data science. want enter either field, ’s good chance ’ll competitive advantage knowing R. Entry-level jobs focusing R also tend make high salary, frequently starting earning $75,000.Countless job listings also require Excel competency. administrative assistants, marketers, academics, , everyone expected use Excel degree, whereas 10 15 years ago optional. good background Excel still attractive resumé help land career high earning potential, many jobs looking Excel skills alone.","code":""},{"path":"r-vs.-excel.html","id":"summary-using-r-and-excel","chapter":"7 R vs. Excel","heading":"7.8 Summary – Using R and Excel","text":"R Excel beneficial different ways. Excel starts easier learn frequently cited go-program reporting, thanks speed efficiency. R designed handle larger data sets, reproducible, create detailed visualizations. ’s question choosing R Excel, deciding program use different needs.","code":""},{"path":"r-basics.html","id":"r-basics","chapter":"8 R basics and workflows","heading":"8 R basics and workflows","text":"","code":""},{"path":"r-basics.html","id":"basics-of-working-with-r-at-the-command-line-and-rstudio-goodies","chapter":"8 R basics and workflows","heading":"8.1 Basics of working with R at the command line and RStudio goodies","text":"Launch RStudio/R.first intall R . RStudio.Installing RInstalling RInstalling RStudioInstalling RStudioCustomizing RStudioCustomizing RStudioRStudio Quick keysRStudio Quick keys","code":""},{"path":"r-basics.html","id":"in-rstudio---where-we-will-live","chapter":"8 R basics and workflows","heading":"8.2 In Rstudio - where we will live","text":"Notice default panes:Console (entire left)Environment/History (tabbed upper right)Files/Plots/Packages/Help (tabbed lower right)","code":""},{"path":"r-basics.html","id":"section","chapter":"8 R basics and workflows","heading":"8.3 ","text":"Rstudio ConsoleFYI: can change default location panes, among many things: Customizing RStudio.Go Console, interact live R process.can make object assigning value statement letter string. use <- assign objects meaning. Create inspect following object:first analysis R:R statements create objects – “assignments” – form:head hear, e.g., “x gets 12.”make lots assignments operator <- pain type. Don’t lazy use =, although work, just sow confusion later. Instead, utilize RStudio’s keyboard shortcut: Alt + - (minus sign).want friend. friend, implore , learn :RStudio insert <- assignment operator Option + - (minus sign)Mac, Alt + - (minus sign) Windows.Notice RStudio automatically surrounds <- spaces, demonstrates useful code formatting practice. Code miserable read good day. Give eyes break use spaces.RStudio offers many handy RStudio Quick keys. Also, Alt+Shift+K brings keyboard shortcut reference card.Object names start digit contain certain characters comma space. wise adopt convention demarcating words names, note best practice choose ONE convention stay true throughout code.Make another assignment:inspect , try RStudio’s completion facility: type first characters, press TAB, add characters disambiguate, press return.Make another assignment:making assignments, best practice keep names brief, yet descriptive. instance, name “this_is_a_really_long_name” accurate, “long_name” much intuitive easy read/type .Let’s try inspect:Implicit contract computer / scripting language: Computer tedious computation . return, completely precise instructions. Typos matter. Case matters. Get better typing.R mind-blowing collection built-functions accessed like :Let’s try using seq() makes regular sequences numbers , ’re , demo helpful features RStudio.Type se hit TAB. pop shows possible completions. Specify seq() typing disambiguate using /arrows select. Notice floating tool-tip-type help pops , reminding function’s arguments. want even help, press F1 directed get full documentation help tab lower right pane. Now open parentheses notice automatic addition closing parenthesis placement cursor middle. Type arguments 1, 10 hit return. RStudio also exits parenthetical expression . IDEs great.also demonstrates something R resolves function arguments. can always specify name = value form. , R attempts resolve position. , assumed want sequence = 1 goes = 10. Since didn’t specify step size, default value function definition used, ends 1 case. functions call often, might use resolve position first\nargument maybe first two. , always use name = value.Make assignment notice similar help quotation marks.just make assignment, don’t get see value, ’re tempted immediately inspect.common action can shortened surrounding assignment parentheses, causes assignment “print screen” happen.best practice always attempt “print” assignments creating . help leviate issue searching 200+ lines code one error causing argument.functions (require) arguments:Now look workspace – upper right pane. workspace user-defined objects accumulate. can also get listing objects commands:want remove object named y, can :remove everything:click broom RStudio’s Environment pane.","code":"\nx <- 3 * 4\nx\n#> [1] 12\nobjectName <- valuei_use_snake_case\nother.people.use.periods\nevenOthersUseCamelCase\nthis_is_a_really_long_name <- 2.5\nturner_rocks <- 2 ^ 3\nturnerrocks\n#> Error in eval(expr, envir, enclos): object 'turnerrocks' not found\nTurner_rocks\n#> Error in eval(expr, envir, enclos): object 'Turner_rocks' not found\nturner_rocks\n#> [1] 8functionName(arg1 = val1, arg2 = val2, and so on)\nseq(1, 10)\n#>  [1]  1  2  3  4  5  6  7  8  9 10\nyo <- \"hello world\"\ny <- seq(1, 10)\ny\n#>  [1]  1  2  3  4  5  6  7  8  9 10\n(y <- seq(1, 10))\n#>  [1]  1  2  3  4  5  6  7  8  9 10\ndate()\n#> [1] \"Thu Feb 24 08:58:49 2022\"\nobjects()\n#> [1] \"this_is_a_really_long_name\"\n#> [2] \"turner_rocks\"              \n#> [3] \"x\"                         \n#> [4] \"y\"                         \n#> [5] \"yo\"\nls()\n#> [1] \"this_is_a_really_long_name\"\n#> [2] \"turner_rocks\"              \n#> [3] \"x\"                         \n#> [4] \"y\"                         \n#> [5] \"yo\"\nrm(y)\nrm(list = ls())"},{"path":"r-basics.html","id":"workspace-and-working-directory","chapter":"8 R basics and workflows","heading":"8.4 Workspace and working directory","text":"One day need quit R, go something else return analysis later (happy day).One day multiple analyses going use R want keep separate (happy day).One day need bring data outside world R send numerical results figures R back world (happiest days).handle real life situations, need make two decisions:analysis “real,” .e. save lasting record happened?analysis “live?”","code":""},{"path":"r-basics.html","id":"workspace-.rdata","chapter":"8 R basics and workflows","heading":"8.4.1 Workspace, .RData","text":"beginning R user, ’s OK consider workspace “real.” soon, urge evolve next level, consider saved R scripts “real.” (either case, course input data much real requires preservation!) input data R code used, can reproduce\neverything. can make analysis fancier. can get bottom puzzling results discover fix bugs code. can reuse code conduct similar analyses new projects. can remake figure different aspect ratio save TIFF instead PDF. ready take questions. ready future.regard workspace “real” (saving reloading time), need redo analysis … ’re going either redo lot typing (making mistakes way) mine R history commands used. Rather [becoming expert managing R history][rstudio-command-history], better use time psychic energy keep “good” R code script future reuse.can useful sometimes, note commands ’ve recently run appear History pane.don’t choose right now two strategies incompatible. Let’s demo save / reload workspace approach.Upon quitting R, decide want save workspace, potential restoration next time launch R. Depending set , R IDE, e.g. RStudio, probably prompt make decision.Quit R/RStudio, either menu, using keyboard shortcut, typing q() Console. ’ll get prompt like :Save workspace image ~/.Rdata?Note workspace image saved click “Save.”Using favorite method, visit directory image saved verify file named .RData. also see file .Rhistory, holding commands submitted recent session.Restart RStudio. Console see line like :indicating workspace restored. Look Workspace pane ’ll see objects . History tab pane, also see command history. ’re back business. way starting stopping analytical work serve well long ’s start.","code":"[Workspace loaded from ~/.RData]"},{"path":"r-basics.html","id":"working-directory","chapter":"8 R basics and workflows","heading":"8.4.2 Working directory","text":"process running computer notion “working directory.” R, R look, default, files ask load. also , default, files write disk go. Chances current working directory directory inspected , .e. one RStudio wanted save workspace.can explicitly check working directory :also displayed top RStudio console.beginning R user, ’s OK let home directory weird directory computer R’s working directory. soon, urge evolve next level, organize analytical projects directories , working project , set R’s working directory associated directory.Although recommend , case ’re curious, can set R’s working directory command line like :Although recommend , can also use RStudio’s Files pane navigate directory set working directory menu: Session > Set Working Directory > Files Pane Location. (’ll see even options ). within Files pane, choose “” “Set Working Directory.”’s better way. way also puts path managing R work like expert.","code":"\ngetwd()\nsetwd(\"~/myCoolProject\")"},{"path":"r-basics.html","id":"exercises","chapter":"8 R basics and workflows","heading":"8.5 Exercises","text":"Create object called “cool_object” assign number 100.Create object called “cool_object” assign number 100.Create new object called “big_brain” multiply object question one 15.Create new object called “big_brain” multiply object question one 15.Print objects.Print objects.Use base R functions return today’s date print .Use base R functions return today’s date print .Create sequence numbers counting 10 100 2.Create sequence numbers counting 10 100 2.Identify working directory. ? Change want .Identify working directory. ? Change want .Save R script answers questions 1 5 . Save ; clean close Rstudio; reopen script run . Make sense?Save R script answers questions 1 5 . Save ; clean close Rstudio; reopen script run . Make sense?","code":""},{"path":"objects-and-arithmetic.html","id":"objects-and-arithmetic","chapter":"9 Objects and Arithmetic","heading":"9 Objects and Arithmetic","text":"","code":""},{"path":"objects-and-arithmetic.html","id":"introduction-1","chapter":"9 Objects and Arithmetic","heading":"9.1 Introduction","text":"R stores information operates objects. simplest objects scalars, vectors matrices.\nmany others: lists dataframes example. advanced use R can also \nuseful define new types object, specific particular application. stick just \ncommonly used objects .\nimportant feature R different things different types objects. \nexample, type:, R scalar arithmetic returning scalar value 10. (actual fact, R returns vector \nlength 1 - hence [1] denoting first element vector.\ncan assign objects values subsequent use. example:calculation , storing result object called z. can look \ncontents object simply typing name:Storing things calculations objects extremely useful, especially longer scripts. Mainly likely call equation multiple times need revise way need change initial assignment rather every line.","code":"\n4+6\n#> [1] 10\nx<-6\ny<-4\nz<-x+y\nz\n#> [1] 10"},{"path":"objects-and-arithmetic.html","id":"basic-functions","chapter":"9 Objects and Arithmetic","heading":"9.2 Basic Functions","text":"time can list objects created:Notice ls actually object . Typing ls result display contents \nobject, case, commands function. use parentheses, ls(), ensures \nfunction executed result - case, list objects directory - displayed.\ncommonly function operate object, example:calculates square root 16. Objects can removed current workspace rm\nfunction:example.many standard functions available R, also possible create new ones.\nVectors can created R number ways. can describe elements:Note use function c concatenate glue together individual elements. function\ncan used much widely, examplewould lead result gluing together two vectors create single vector.Sequences can generated follows:general sequences can generated using seq command. example:examples illustrate many functions R optional arguments, case, either step length total length sequence (doesn’t make sense use ). leave options, R make default choice, case assuming step length\n1. , example,also generates vector integers 1 10.point ’s worth mentioning help facility. don’t know use function,\ndon’t know options default values , type help(functionname) functionname name function interested . usually help often include examples make things even clearer.Another useful function building vectors rep command repeating things. \nexample:also simplify cleverly :explained , R often adapt objects asked work . example:andshowing R uses componentwise arithmetic vectors. R also try make sense objects\nmixed. example:though care taken make sure R like circumstances.Two particularly useful functions worth remembering length returns length vector (.e. number elements contains) sum calculates sum elements vector.","code":"\nls()\n#> [1] \"x\" \"y\" \"z\"\nsqrt(16)\n#> [1] 4\nrm(x,y)\nz<-c(5,9,1,0)\nx<-c(5,9)\ny<-c(1,0)\nz<-c(x,y)\nx<-1:10\nseq(1,9,by=2)\n#> [1] 1 3 5 7 9\nseq(8,20,length=6)\n#> [1]  8.0 10.4 12.8 15.2 17.6 20.0\nseq(8,20,length=6)\n#> [1]  8.0 10.4 12.8 15.2 17.6 20.0\nx<-seq(1,10)\nx\n#>  [1]  1  2  3  4  5  6  7  8  9 10\nrep(0,100)\n#>   [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n#>  [28] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n#>  [55] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n#>  [82] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\nrep(1:3,6)\n#>  [1] 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\nrep(1:3,c(6,6,6))\n#>  [1] 1 1 1 1 1 1 2 2 2 2 2 2 3 3 3 3 3 3\nrep(1:3,rep(6,3))\n#>  [1] 1 1 1 1 1 1 2 2 2 2 2 2 3 3 3 3 3 3\nx<-c(6,8,9)\ny<-c(1,2,4)\nx+y\n#> [1]  7 10 13\nx*y\n#> [1]  6 16 36\nx<-c(6,8,9)\nx+2\n#> [1]  8 10 11"},{"path":"objects-and-arithmetic.html","id":"statistics-and-summaries","chapter":"9 Objects and Arithmetic","heading":"9.3 Statistics and Summaries","text":"One useful functions R ability perform statistical analysis large pieces data. Later book cover analysis can used build complex models test accuracy. now, focus perform basic statistical analysis definitions basic terms.","code":""},{"path":"objects-and-arithmetic.html","id":"statistical-analysis","chapter":"9 Objects and Arithmetic","heading":"9.3.1 Statistical Analysis","text":"’ve undoubtedly heard terms mean, median, standard deviation variance. However, asked define terms provide examples usefulness, say? section going answer first part question.Mean pretty straight forward concept . Commonly referred “average,” find number adding numbers data set together divide total number points used. easily done calculator working less 20 digits, however almost never case data science. Often, especially R, dealing data sets hundreds, thousands, maybe even hundreds thousands data points. Fortunately, R takes pain away process offers simple function . Start creating object contains list numbers, simply use mean function calculate average variable.median data set data point fall middle points ordered lowest highest. , something easily found even without calculator small data sets, however humans can miscount data sets just massive us . R never makes counting mistakes using simple function save hours mundane counting. Start way found mean creating object various numbers simply use median function.Many people heard standard deviation, many can provide accurate definition. Standard deviation measure variance (see next paragraph) numbers data set data set’s mean. Typically lower standard deviation want see proves little variance data set typically means higher correlation. wanted find hand find square root variance point mean. easy numbers need, almost never case thus calculate variance hand much work. take extra steps R can ? sd() function work without hassle, identify object want find standard deviation .Finally, can cover variance. Variance measure distance two numbers. statistic often used measure spread data can used determine model’s accuracy. Typically, higher variance means model inaccurate. , building models reviewing summary statistics, want variance low possible. var() function find variance variable , however typically create confusion matrix (discussed later section) help determine variance, thus accuracy model.","code":"\na <- c(3.8,4,3.1,2.1,12.6,17,8.43,11,2,3,9,5,3,0.5)\n\nmean(a)\n#> [1] 6.037857\nb <- c(3.8,4,3.1,2.1,12.6,17,8.43,11,2,3,9,5,3,0.5)\n\nmedian(b)\n#> [1] 3.9\nd <- c(3.8,4,3.1,2.1,12.6,17,8.43,11,2,3,9,5,3,0.5)\n\nsd(d)\n#> [1] 4.821066"},{"path":"objects-and-arithmetic.html","id":"anscombes-quartet","chapter":"9 Objects and Arithmetic","heading":"9.3.2 Anscombe’s Quartet","text":"may asking now, bother visualizing data numbers tell need know data? correct saying statistical data useful, many cases essential, however visualization equally important. Anscombe’s Quartet statistical phenomenon four sets data similar statistical properties, completely different graphed. Let’s take look data:can see table, summary statistics four tables look similar, however let’s graph see kind visualizations get.Pretty rad right? yes, statistical data vital, however thing look , sometimes visualization can help understand data ! Later book, upper level data analytics courses, cover visualizations can useful.","code":"#>    x1 x2 x3 x4    y1   y2    y3    y4\n#> 1  10 10 10  8  8.04 9.14  7.46  6.58\n#> 2   8  8  8  8  6.95 8.14  6.77  5.76\n#> 3  13 13 13  8  7.58 8.74 12.74  7.71\n#> 4   9  9  9  8  8.81 8.77  7.11  8.84\n#> 5  11 11 11  8  8.33 9.26  7.81  8.47\n#> 6  14 14 14  8  9.96 8.10  8.84  7.04\n#> 7   6  6  6  8  7.24 6.13  6.08  5.25\n#> 8   4  4  4 19  4.26 3.10  5.39 12.50\n#> 9  12 12 12  8 10.84 9.13  8.15  5.56\n#> 10  7  7  7  8  4.82 7.26  6.42  7.91\n#> 11  5  5  5  8  5.68 4.74  5.73  6.89#>                    x1        x2        x3        x4\n#> nobs        11.000000 11.000000 11.000000 11.000000\n#> NAs          0.000000  0.000000  0.000000  0.000000\n#> Minimum      4.000000  4.000000  4.000000  8.000000\n#> Maximum     14.000000 14.000000 14.000000 19.000000\n#> 1. Quartile  6.500000  6.500000  6.500000  8.000000\n#> 3. Quartile 11.500000 11.500000 11.500000  8.000000\n#> Mean         9.000000  9.000000  9.000000  9.000000\n#> Median       9.000000  9.000000  9.000000  8.000000\n#> Sum         99.000000 99.000000 99.000000 99.000000\n#> SE Mean      1.000000  1.000000  1.000000  1.000000\n#> LCL Mean     6.771861  6.771861  6.771861  6.771861\n#> UCL Mean    11.228139 11.228139 11.228139 11.228139\n#> Variance    11.000000 11.000000 11.000000 11.000000\n#> Stdev        3.316625  3.316625  3.316625  3.316625\n#> Skewness     0.000000  0.000000  0.000000  2.466911\n#> Kurtosis    -1.528926 -1.528926 -1.528926  4.520661\n#>                    y1        y2        y3        y4\n#> nobs        11.000000 11.000000 11.000000 11.000000\n#> NAs          0.000000  0.000000  0.000000  0.000000\n#> Minimum      4.260000  3.100000  5.390000  5.250000\n#> Maximum     10.840000  9.260000 12.740000 12.500000\n#> 1. Quartile  6.315000  6.695000  6.250000  6.170000\n#> 3. Quartile  8.570000  8.950000  7.980000  8.190000\n#> Mean         7.500909  7.500909  7.500000  7.500909\n#> Median       7.580000  8.140000  7.110000  7.040000\n#> Sum         82.510000 82.510000 82.500000 82.510000\n#> SE Mean      0.612541  0.612568  0.612196  0.612242\n#> LCL Mean     6.136083  6.136024  6.135943  6.136748\n#> UCL Mean     8.865735  8.865795  8.864057  8.865070\n#> Variance     4.127269  4.127629  4.122620  4.123249\n#> Stdev        2.031568  2.031657  2.030424  2.030579\n#> Skewness    -0.048374 -0.978693  1.380120  1.120774\n#> Kurtosis    -1.199123 -0.514319  1.240044  0.628751"},{"path":"objects-and-arithmetic.html","id":"exercises-1","chapter":"9 Objects and Arithmetic","heading":"9.4 Exercises","text":"DefineDecide result following:\nlength(x)\nsum(x)\nsum(x^2)\nx+y\nx*y\nx-2\nx^2\nlength(x)sum(x)sum(x^2)x+yx*yx-2x^2Use R check answers.Decide following sequences use R check answers:\n7:11\nseq(2,9)\nseq(4,10,=2)\nseq(3,30,length=10)\nseq(6,-4,=-2)\n7:11seq(2,9)seq(4,10,=2)seq(3,30,length=10)seq(6,-4,=-2)Determine result following R expressions, use R check right:\nrep(2,4)\nrep(c(1,2),4)\nrep(c(1,2),c(4,4))\nrep(1:4,4)\nrep(1:4,rep(3,4))\nrep(2,4)rep(c(1,2),4)rep(c(1,2),c(4,4))rep(1:4,4)rep(1:4,rep(3,4))Use rep function define simply following vectors R.\n6,6,6,6,6,6\n5,8,5,8,5,8,5,8\n5,5,5,5,8,8,8,8\n6,6,6,6,6,65,8,5,8,5,8,5,85,5,5,5,8,8,8,8","code":"\nx<-c(4,2,6)\ny<-c(1,0,-1)"},{"path":"summaries-and-subscripting.html","id":"summaries-and-subscripting","chapter":"10 Summaries and Subscripting","heading":"10 Summaries and Subscripting","text":"","code":""},{"path":"summaries-and-subscripting.html","id":"introduction-2","chapter":"10 Summaries and Subscripting","heading":"10.1 Introduction","text":"Let’s suppose ’ve collected data experiment stored object x:simple summary statistics data can produced:self explanatory.may , however, subsequently learn first 6 data points correspond measurements made one machine, second six another machine.might lead us want summarize two sets data separately, need extract \nx two relevant subvectors. achieved subscripting:subsets can created obvious way. example:Negative integers can used exclude particular elements. examplehas effect ","code":"\nx<-c(7.5,8.2,3.1,5.6,8.2,9.3,6.5,7.0,9.3,1.2,14.5,6.2)\nmean(x)\n#> [1] 7.216667\nvar(x)\n#> [1] 11.00879\nsd(x)\n#> [1] 3.317949\nsummary(x)\n#>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n#>   1.200   6.050   7.250   7.217   8.475  14.500\nx[1:6]\n#> [1] 7.5 8.2 3.1 5.6 8.2 9.3\nx[7:12]\n#> [1]  6.5  7.0  9.3  1.2 14.5  6.2\nsummary(x[1:6])\n#>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n#>   3.100   6.075   7.850   6.983   8.200   9.300\nsummary(x[7:12])\n#>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n#>   1.200   6.275   6.750   7.450   8.725  14.500\nx[c(2,4,9)]\n#> [1] 8.2 5.6 9.3\nx[-(1:6)]\n#> [1]  6.5  7.0  9.3  1.2 14.5  6.2\nx[7:12]\n#> [1]  6.5  7.0  9.3  1.2 14.5  6.2"},{"path":"summaries-and-subscripting.html","id":"exercises-summaries-and-subscripting","chapter":"10 Summaries and Subscripting","heading":"10.2 Exercises (Summaries and Subscripting)","text":"x<- c(5,9,2,3,4,6,7,0,8,12,2,9) decide following use R \ncheck answers:x[2]x[2:4]x[c(2,3,6)]x[c(1:5,10:12)]x[-(10:12)]data y<-c(33,44,29,16,25,45,33,19,54,22,21,49,11,24,56) contain sales milk\ngallons 5 days three different shops (frst 3 values shops 1,2 3 \nMonday, etc.) Produce statistical summary sales day week also\nshop.","code":""},{"path":"matrices.html","id":"matrices","chapter":"11 Matrices","heading":"11 Matrices","text":"","code":""},{"path":"matrices.html","id":"cbind-and-rbind","chapter":"11 Matrices","heading":"11.1 CBind and RBind","text":"Matrices can created R variety ways. Perhaps simplest create columns (just couple objects) glue together command cbind. example,dimension matrix can checked dim command:[1] 3 2 .e., three rows two columns. similar command, rbind, building matrices gluing rows together.functions cbind rbind can also applied matrices (provided dimensions match) form larger matrices. example,","code":"\nx<-c(5,7,9)\ny<-c(6,3,4)\nz<-cbind(x,y)\nz\n#>      x y\n#> [1,] 5 6\n#> [2,] 7 3\n#> [3,] 9 4\ndim(z)\n#> [1] 3 2\nrbind(z,z)\n#>      x y\n#> [1,] 5 6\n#> [2,] 7 3\n#> [3,] 9 4\n#> [4,] 5 6\n#> [5,] 7 3\n#> [6,] 9 4"},{"path":"matrices.html","id":"review-questions","chapter":"11 Matrices","heading":"11.1.1 Review Questions","text":"Create matrix made two columns showing GPAs number hours studied seven students.Create matrix made two columns showing GPAs number hours studied seven students.Recreate following matrix R:Recreate following matrix R:Using appropriate function, combine two matrices created .","code":"#>      x   y\n#> [1,] 5 3.4\n#> [2,] 7 4.0\n#> [3,] 2 2.5\n#> [4,] 3 3.2\n#> [5,] 8 2.8\n#> [6,] 4 3.1\n#> [7,] 2 3.6"},{"path":"matrices.html","id":"matrix-function","chapter":"11 Matrices","heading":"11.2 Matrix Function","text":"Matrices can also built explicit construction via function matrix. example,results matrix z identical z . Notice dimension matrix determined size vector requirement number rows 3, specified argument nrow=3. alternative specified number columns argument ncol=2 (obviously, unnecessary give ). Notice matrix ‘flled ’ column-wise. instead wish fill row-wise, add option byrow=T. example,Notice argument nrow abbreviated nr. abbreviations always possible function arguments provided induces ambiguity - doubt always use full argument name.usual, R try interpret operations matrices natural way. example, z , andwe obtainandOther useful functions matrices transpose matrix:vectors useful able extract sub-components matrices. case, wemay wish pick individual elements, rows columns. , [ ] notation used subscript. following examples make things clear:, particular, necessary specify rows columns required, whilst omitting\ninteger either dimension implies every element dimension selected.","code":"\nz<-matrix(c(5,7,9,6,3,4),nrow=3)\nz<-matrix(c(5,7,9,6,3,4),nr=3,byrow=T)\nz\n#>      [,1] [,2]\n#> [1,]    5    7\n#> [2,]    9    6\n#> [3,]    3    4\ny<-matrix(c(1,3,0,9,5,-1),nrow=3,byrow=T)\ny\n#>      [,1] [,2]\n#> [1,]    1    3\n#> [2,]    0    9\n#> [3,]    5   -1\ny+z\n#>      [,1] [,2]\n#> [1,]    6   10\n#> [2,]    9   15\n#> [3,]    8    3\ny*z\n#>      [,1] [,2]\n#> [1,]    5   21\n#> [2,]    0   54\n#> [3,]   15   -4\nz\n#>      [,1] [,2]\n#> [1,]    5    7\n#> [2,]    9    6\n#> [3,]    3    4\nt(z)\n#>      [,1] [,2] [,3]\n#> [1,]    5    9    3\n#> [2,]    7    6    4\nz[1,1]\n#> [1] 5\nz[c(2,3),2]\n#> [1] 6 4\nz[,2]\n#> [1] 7 6 4\nz[1:2,]\n#>      [,1] [,2]\n#> [1,]    5    7\n#> [2,]    9    6"},{"path":"matrices.html","id":"exercises-2","chapter":"11 Matrices","heading":"11.3 Exercises","text":"Create matrix RCreate R matrices:Calculate following check answers R:2*xx*xt(y)x y , calculate effect following subscript operations check\nanswers R.x[1,]x[2,]x[,2]y[1,2]y[,2:3]","code":"#>      [,1] [,2] [,3] [,4] [,5]\n#> [1,]    1    7    8   11   -5\n#> [2,]    3    8    6    3   -9\n#> [3,]    0   11   14   14   14\nx\n#>      [,1] [,2]\n#> [1,]    1    7\n#> [2,]    8   11\n#> [3,]    5    9\ny\n#>      [,1] [,2]\n#> [1,]    6    8\n#> [2,]    2    1\n#> [3,]    1   -7#>      [,1] [,2]\n#> [1,]    2   14\n#> [2,]   16   22\n#> [3,]   10   18\n#>      [,1] [,2]\n#> [1,]    1   49\n#> [2,]   64  121\n#> [3,]   25   81\n#>      [,1] [,2] [,3]\n#> [1,]    6    2    1\n#> [2,]    8    1   -7"},{"path":"preloaded-data-and-mtcars.html","id":"preloaded-data-and-mtcars","chapter":"12 Preloaded data and mtcars","heading":"12 Preloaded data and mtcars","text":"R comes several built-data sets, generally used demo data playing R functions.see datasets type:data()","code":""},{"path":"preloaded-data-and-mtcars.html","id":"practicing-with-mtcars-data-set","chapter":"12 Preloaded data and mtcars","heading":"12.1 Practicing with mtcars data set","text":"demonstration based datasset mtcars.Read mtcarsView first rows last rows mtcars dataframe using functions head() tail()info mtcars dataframe using function colnames(), rownames(), summary()dim()calculate variance weight:get histogram hp, code produce histogram:calculate quantiles percent:","code":"\ndata(mtcars)\nhead(mtcars)\n#>                    mpg cyl disp  hp drat    wt  qsec vs am\n#> Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1\n#> Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1\n#> Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1\n#> Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0\n#> Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0\n#> Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0\n#>                   gear carb\n#> Mazda RX4            4    4\n#> Mazda RX4 Wag        4    4\n#> Datsun 710           4    1\n#> Hornet 4 Drive       3    1\n#> Hornet Sportabout    3    2\n#> Valiant              3    1\ntail(mtcars)\n#>                 mpg cyl  disp  hp drat    wt qsec vs am\n#> Porsche 914-2  26.0   4 120.3  91 4.43 2.140 16.7  0  1\n#> Lotus Europa   30.4   4  95.1 113 3.77 1.513 16.9  1  1\n#> Ford Pantera L 15.8   8 351.0 264 4.22 3.170 14.5  0  1\n#> Ferrari Dino   19.7   6 145.0 175 3.62 2.770 15.5  0  1\n#> Maserati Bora  15.0   8 301.0 335 3.54 3.570 14.6  0  1\n#> Volvo 142E     21.4   4 121.0 109 4.11 2.780 18.6  1  1\n#>                gear carb\n#> Porsche 914-2     5    2\n#> Lotus Europa      5    2\n#> Ford Pantera L    5    4\n#> Ferrari Dino      5    6\n#> Maserati Bora     5    8\n#> Volvo 142E        4    2\ncolnames(mtcars)\n#>  [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"  \n#>  [9] \"am\"   \"gear\" \"carb\"\nrownames(mtcars)\n#>  [1] \"Mazda RX4\"           \"Mazda RX4 Wag\"      \n#>  [3] \"Datsun 710\"          \"Hornet 4 Drive\"     \n#>  [5] \"Hornet Sportabout\"   \"Valiant\"            \n#>  [7] \"Duster 360\"          \"Merc 240D\"          \n#>  [9] \"Merc 230\"            \"Merc 280\"           \n#> [11] \"Merc 280C\"           \"Merc 450SE\"         \n#> [13] \"Merc 450SL\"          \"Merc 450SLC\"        \n#> [15] \"Cadillac Fleetwood\"  \"Lincoln Continental\"\n#> [17] \"Chrysler Imperial\"   \"Fiat 128\"           \n#> [19] \"Honda Civic\"         \"Toyota Corolla\"     \n#> [21] \"Toyota Corona\"       \"Dodge Challenger\"   \n#> [23] \"AMC Javelin\"         \"Camaro Z28\"         \n#> [25] \"Pontiac Firebird\"    \"Fiat X1-9\"          \n#> [27] \"Porsche 914-2\"       \"Lotus Europa\"       \n#> [29] \"Ford Pantera L\"      \"Ferrari Dino\"       \n#> [31] \"Maserati Bora\"       \"Volvo 142E\"\nsummary(mtcars)\n#>       mpg             cyl             disp      \n#>  Min.   :10.40   Min.   :4.000   Min.   : 71.1  \n#>  1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8  \n#>  Median :19.20   Median :6.000   Median :196.3  \n#>  Mean   :20.09   Mean   :6.188   Mean   :230.7  \n#>  3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0  \n#>  Max.   :33.90   Max.   :8.000   Max.   :472.0  \n#>        hp             drat             wt       \n#>  Min.   : 52.0   Min.   :2.760   Min.   :1.513  \n#>  1st Qu.: 96.5   1st Qu.:3.080   1st Qu.:2.581  \n#>  Median :123.0   Median :3.695   Median :3.325  \n#>  Mean   :146.7   Mean   :3.597   Mean   :3.217  \n#>  3rd Qu.:180.0   3rd Qu.:3.920   3rd Qu.:3.610  \n#>  Max.   :335.0   Max.   :4.930   Max.   :5.424  \n#>       qsec             vs               am        \n#>  Min.   :14.50   Min.   :0.0000   Min.   :0.0000  \n#>  1st Qu.:16.89   1st Qu.:0.0000   1st Qu.:0.0000  \n#>  Median :17.71   Median :0.0000   Median :0.0000  \n#>  Mean   :17.85   Mean   :0.4375   Mean   :0.4062  \n#>  3rd Qu.:18.90   3rd Qu.:1.0000   3rd Qu.:1.0000  \n#>  Max.   :22.90   Max.   :1.0000   Max.   :1.0000  \n#>       gear            carb      \n#>  Min.   :3.000   Min.   :1.000  \n#>  1st Qu.:3.000   1st Qu.:2.000  \n#>  Median :4.000   Median :2.000  \n#>  Mean   :3.688   Mean   :2.812  \n#>  3rd Qu.:4.000   3rd Qu.:4.000  \n#>  Max.   :5.000   Max.   :8.000\ndim(mtcars)\n#> [1] 32 11\nvar(mtcars$wt)\n#> [1] 0.957379\nhist(mtcars$hp)\nquantile(mtcars$wt, c(.2, .4, .8))\n#>   20%   40%   80% \n#> 2.349 3.158 3.770"},{"path":"preloaded-data-and-mtcars.html","id":"excerises-for-you","chapter":"12 Preloaded data and mtcars","heading":"12.2 Excerises for you:","text":"Find minimum maximum value mpgFind minimum maximum value mpgFind mean standard deviation data variable mpgFind mean standard deviation data variable mpgWhat variable 3rd quartile value 180.0?variable 3rd quartile value 180.0?Create explain meansCreate explain meansCreate explain meansCreate variable called efficiency mpg divided weight. car max efficiency value?variable dataset greatest standard deviation?many cars 3 gears?many cars get 17 mpg?","code":"#>             mpg        cyl       disp         hp\n#> mpg   1.0000000 -0.8521620 -0.8475514 -0.7761684\n#> cyl  -0.8521620  1.0000000  0.9020329  0.8324475\n#> disp -0.8475514  0.9020329  1.0000000  0.7909486\n#> hp   -0.7761684  0.8324475  0.7909486  1.0000000\n#> drat  0.6811719 -0.6999381 -0.7102139 -0.4487591\n#> wt   -0.8676594  0.7824958  0.8879799  0.6587479\n#> qsec  0.4186840 -0.5912421 -0.4336979 -0.7082234\n#> vs    0.6640389 -0.8108118 -0.7104159 -0.7230967\n#> am    0.5998324 -0.5226070 -0.5912270 -0.2432043\n#> gear  0.4802848 -0.4926866 -0.5555692 -0.1257043\n#> carb -0.5509251  0.5269883  0.3949769  0.7498125\n#>             drat         wt        qsec         vs\n#> mpg   0.68117191 -0.8676594  0.41868403  0.6640389\n#> cyl  -0.69993811  0.7824958 -0.59124207 -0.8108118\n#> disp -0.71021393  0.8879799 -0.43369788 -0.7104159\n#> hp   -0.44875912  0.6587479 -0.70822339 -0.7230967\n#> drat  1.00000000 -0.7124406  0.09120476  0.4402785\n#> wt   -0.71244065  1.0000000 -0.17471588 -0.5549157\n#> qsec  0.09120476 -0.1747159  1.00000000  0.7445354\n#> vs    0.44027846 -0.5549157  0.74453544  1.0000000\n#> am    0.71271113 -0.6924953 -0.22986086  0.1683451\n#> gear  0.69961013 -0.5832870 -0.21268223  0.2060233\n#> carb -0.09078980  0.4276059 -0.65624923 -0.5696071\n#>               am       gear        carb\n#> mpg   0.59983243  0.4802848 -0.55092507\n#> cyl  -0.52260705 -0.4926866  0.52698829\n#> disp -0.59122704 -0.5555692  0.39497686\n#> hp   -0.24320426 -0.1257043  0.74981247\n#> drat  0.71271113  0.6996101 -0.09078980\n#> wt   -0.69249526 -0.5832870  0.42760594\n#> qsec -0.22986086 -0.2126822 -0.65624923\n#> vs    0.16834512  0.2060233 -0.56960714\n#> am    1.00000000  0.7940588  0.05753435\n#> gear  0.79405876  1.0000000  0.27407284\n#> carb  0.05753435  0.2740728  1.00000000"},{"path":"more-simple-data-wrangling.html","id":"more-simple-data-wrangling","chapter":"13 More simple data wrangling","heading":"13 More simple data wrangling","text":"","code":""},{"path":"more-simple-data-wrangling.html","id":"a-nice-fun-little-matrix-for-you","chapter":"13 More simple data wrangling","heading":"13.1 a nice, fun little matrix for you","text":"Write code creates matrix:Write code creates matrix:Write DIFFERENT code creates matrix alternate way:Write DIFFERENT code creates matrix alternate way:matrix , [,4] mean?matrix , [,4] mean?code return value 3rd column 3rd row?code return value 3rd column 3rd row?single line give average numbers columns 2, 4, 5 rows 1 3?single line give average numbers columns 2, 4, 5 rows 1 3?turn x data frame.turn x data frame.know turned x data frame?know turned x data frame?","code":"#>      [,1] [,2] [,3] [,4] [,5]\n#> [1,]    1    4    7   10   13\n#> [2,]    2    5    8   11   14\n#> [3,]    3    6    9   12   15"},{"path":"more-simple-data-wrangling.html","id":"more-fun-this-class-is-really-awesome-isnt-it","chapter":"13 More simple data wrangling","heading":"13.2 More fun (this class is really awesome isn’t it?)","text":"Consider dataframe called df. running code return sum(df[7,7:10])Consider dataframe called df. running code return sum(df[7,7:10])can tell object R dataframe?can tell object R dataframe?create dataframe called df?create dataframe called df?code return average row 2 df?code return average row 2 df?Consider mtcars dataset comes preloaded R looks like :Consider mtcars dataset comes preloaded R looks like :get error run code : Error plot(hp, mpg) : object 'hp' found?Error plot(hp, mpg) : object 'hp' foundBonus: topic find confusing point class?","code":"\ndf\n#>    X1 X2 X3 X4 X5 X6 X7 X8 X9 X10\n#> 1   1 11 21 31 41 51 61 71 81  91\n#> 2   2 12 22 32 42 52 62 72 82  92\n#> 3   3 13 23 33 43 53 63 73 83  93\n#> 4   4 14 24 34 44 54 64 74 84  94\n#> 5   5 15 25 35 45 55 65 75 85  95\n#> 6   6 16 26 36 46 56 66 76 86  96\n#> 7   7 17 27 37 47 57 67 77 87  97\n#> 8   8 18 28 38 48 58 68 78 88  98\n#> 9   9 19 29 39 49 59 69 79 89  99\n#> 10 10 20 30 40 50 60 70 80 90 100\nhead(mtcars)\n#>                    mpg cyl disp  hp drat    wt  qsec vs am\n#> Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1\n#> Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1\n#> Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1\n#> Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0\n#> Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0\n#> Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0\n#>                   gear carb\n#> Mazda RX4            4    4\n#> Mazda RX4 Wag        4    4\n#> Datsun 710           4    1\n#> Hornet 4 Drive       3    1\n#> Hornet Sportabout    3    2\n#> Valiant              3    1\nplot(hp,mpg)"},{"path":"gdh-ice-cream.html","id":"gdh-ice-cream","chapter":"14 GDH Ice Cream","heading":"14 GDH Ice Cream","text":"","code":""},{"path":"gdh-ice-cream.html","id":"problem-introduction","chapter":"14 GDH Ice Cream","heading":"14.1 Problem Introduction","text":"GDH provides ice cream wonderful customers. LOVE GDH. love much (let’s discuss)?last three years GDH used ice cream, pounds, month, shown attached file.","code":"#>  Month.Name year1 year2 year3\n#>         Jan    60    67    64\n#>         Feb    68    67    72\n#>         Mar    83    62    61\n#>         Apr   102    95   107\n#>         May    95   105   101\n#>         Jun    57    89    75\n#>         Jul    61    57    81\n#>         Aug   109   109   104\n#>         Sep    56    86    88\n#>         Oct    53    53    65\n#>         Nov    74    72    72\n#>         Dec    73    64    65"},{"path":"gdh-ice-cream.html","id":"assignment","chapter":"14 GDH Ice Cream","heading":"14.2 Assignment","text":"Please answer following questions using R:.GDH provides ice cream cones customers. last three years GDH used ice cream, pounds, month, shown attached file.R, create data frame name ice.creamWhat another way created data set?Using R, mean using months Feb Oct?Create chart showing ice cream use time.year used ice cream?month highest standard deviation ice cream use?year highest standard deviation ice cream use?Also, May want check link look something called dataframes may help assignment (absolutely necessary) https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/data.frameCan transpose matrix?Can add meaningful row names column names?#Machine Learning?talked Target Pregnancy Story yet?Target Figured Teen Girl Pregnant Father DidThis fun stuff begins! learned point barely scratched surface R capable . world data science, R used three primary purposes, purposes (1) data transformation, (2) data wrangling, (3) machine learning. two purposes covered earlier chapters book. reason covered topics first lay foundation. real world, likely never given clean data set, wrangling transformation anything else possible. , experience many data science students, cleaning data tedious time consuming process project.Enough old stuff, machine learning? According Merriam-Webster Dictionary, machine learning “process computer able improve performance continuously incorporating new data existing statistical model.” Let’s take trip back Target story discussed introductory chapter. data scientist, likely data scientists (collaborative work essential field), worked model likely experts machine learning. able train computer look thousands (probably ) customers’ data computer, based algorithms written “data nerds,” able predict whether customer pregnant! Think possible applications technology? predict well student preform exam, risk someone suffering heart attack, likelihood someone default loan. Every field existence today find way implement machine learning optimize business.two branches machine learning, supervised unsupervised. unique uses, however course focus supervised machine learning. Supervised machine learning required us provide clean data set clearly defined variables instructions. Essentially, give computer information needs provide specific instructions detailing like see happen, rest. Linear regression typically first method supervised learning people introduced , focus chapter.Note, concepts common sense can difficult wrap head around times. sure constantly turn instructor peers assistance remember hundreds online resources disposal. anything though, practice makes perfect. popular rule states mastering skill can take upwards 10,000 hours! Now, course going take 10 years complete, however goal end chapter know way around basics linear regression.","code":""},{"path":"quick-linear-regression.html","id":"quick-linear-regression","chapter":"15 Quick Linear Regression","heading":"15 Quick Linear Regression","text":"","code":""},{"path":"quick-linear-regression.html","id":"quick-linear-regression-using-loblolly","chapter":"15 Quick Linear Regression","heading":"15.1 Quick Linear regression using Loblolly","text":"load Loblolly create scatter plot data plot age independent variable height \ndependent variable.Notice R automatically labeled x- y-axes, also want scatter plot \nmain title. add title, use command title(main = “Loblolly Pine Tree Heights”).find linear model relates age height loblolly pine trees, use \ncommand fit1<-lm(Loblolly$height~Loblolly$age).Think lm(Loblolly$height~Loblolly$age) slope-intercept form (y=mx+b).see model, type fit1Now want add graph line best fit scatter plot. , use \ncommand abline(fit1). .final piece information want data correlation age height\nLoblolly pine trees. find correlation coefficient, use command cor(Loblolly$height, Loblolly$age)command mean: plot(Loblolly)?","code":"\nfit1 <- lm(Loblolly$height~Loblolly$age)\nfit1\n#> \n#> Call:\n#> lm(formula = Loblolly$height ~ Loblolly$age)\n#> \n#> Coefficients:\n#>  (Intercept)  Loblolly$age  \n#>       -1.312         2.591#> [1] 0.9899132\n#> \n#>  Pearson's product-moment correlation\n#> \n#> data:  Loblolly$height and Loblolly$age\n#> t = 63.272, df = 82, p-value < 2.2e-16\n#> alternative hypothesis: true correlation is not equal to 0\n#> 95 percent confidence interval:\n#>  0.9844505 0.9934631\n#> sample estimates:\n#>       cor \n#> 0.9899132"},{"path":"linear-regression-with-mtcars.html","id":"linear-regression-with-mtcars","chapter":"16 Linear Regression with mtcars","heading":"16 Linear Regression with mtcars","text":"Remember: ~ means “explained ,” formula mpg ~ wt means predicting mpg explained wt. helpful way view output :","code":""},{"path":"linear-regression-with-mtcars.html","id":"excercises-for-you","chapter":"16 Linear Regression with mtcars","heading":"16.1 Excercises for you","text":"","code":""},{"path":"linear-regression-with-mtcars.html","id":"mtcars","chapter":"16 Linear Regression with mtcars","heading":"16.1.1 mtcars","text":"variable mtcars dataset think best predicts mpg ?mpg predict car displacement 333?mpg predict car displacement 12 cylinders?mpg predict car displacement 333 12 cylinders?mpg predict car displacement 333, 12 cylinders, weighs 4,000 pounds?","code":""},{"path":"linear-regression-with-mtcars.html","id":"trees","chapter":"16 Linear Regression with mtcars","heading":"16.1.2 trees","text":"Open trees dataset R.variables mean?Make plot Volume x axis Height Y add best fit line.Use Girth Height predict Volume. predict tree Girth 10 Height 100 feet?Use Girth Height predict Volume. predict tree Girth 10 Height 15 meters?maximum circumference tree dataset?","code":""},{"path":"linear-regression-with-mtcars.html","id":"more-excercises-for-you","chapter":"16 Linear Regression with mtcars","heading":"16.2 More Excercises for you","text":"1.Open women data set. Add new variable (column) women dataframe called GPA 15 numbers: 1.5, 3.7, 4,1, 3, 2.5, 3.8, 0.8, 2, 4, 1, 3, 2.5, 3.0, 4.0. shoud get something looks similar mine.Use GPA weight predict height person 155 pounds GPA 3.33. prediction?Use GPA weight predict height person 155 pounds GPA 3.33. prediction?GPA significant predictor height know?GPA significant predictor height know?Create figure showing best fit line height GPA.Create figure showing best fit line height GPA.Install dplyr package Rstudio session.Install dplyr package Rstudio session.","code":"FALSE    height weight GPA\nFALSE 1      58    115 1.5\nFALSE 2      59    117 3.7\nFALSE 3      60    120 4.0\nFALSE 4      61    123 1.0\nFALSE 5      62    126 3.0\nFALSE 6      63    129 2.5\nFALSE 7      64    132 3.8\nFALSE 8      65    135 0.8\nFALSE 9      66    139 2.0\nFALSE 10     67    142 4.0\nFALSE 11     68    146 1.0\nFALSE 12     69    150 3.0\nFALSE 13     70    154 2.5\nFALSE 14     71    159 3.0\nFALSE 15     72    164 4.0"},{"path":"deeper-linear-regression.html","id":"deeper-linear-regression","chapter":"17 Deeper Linear Regression","heading":"17 Deeper Linear Regression","text":"Let’s chat understaning linear regression important.may always seem something new, cool, shiny field AI/ML, classic statistical methods leverage machine learning techniques remain powerful practical solving many real-world business problems.Let’s look simple model first. example, need import Introduction Statistical Learning package (ISLR). use “credit” data set part ISLR package.lm function use create linear regression models. Now, discuss interpreting results get function, discuss different parts model. “~” symbol key entire equation. telling R predict whatever left side tilde using variables right.","code":"\nlibrary(ISLR)\ndata(\"Credit\")\nattach(Credit)\n\nM1 <- lm(Balance ~ Limit + Ethnicity)"},{"path":"deeper-linear-regression.html","id":"interpretation-of-the-model","chapter":"17 Deeper Linear Regression","heading":"17.1 Interpretation of the Model","text":"Let’s run summary model see get.lot statistical jargon included summary may unfamiliar taken statistics . okay, however, going breakdown main statistics interested . Let’s start variables significance model.","code":"\nsummary(M1)\n#> \n#> Call:\n#> lm(formula = Balance ~ Limit + Ethnicity)\n#> \n#> Residuals:\n#>     Min      1Q  Median      3Q     Max \n#> -677.39 -145.75   -8.75  139.56  776.46 \n#> \n#> Coefficients:\n#>                      Estimate Std. Error t value Pr(>|t|)\n#> (Intercept)        -3.078e+02  3.417e+01  -9.007   <2e-16\n#> Limit               1.718e-01  5.079e-03  33.831   <2e-16\n#> EthnicityAsian      2.835e+01  3.304e+01   0.858    0.391\n#> EthnicityCaucasian  1.381e+01  2.878e+01   0.480    0.632\n#>                       \n#> (Intercept)        ***\n#> Limit              ***\n#> EthnicityAsian        \n#> EthnicityCaucasian    \n#> ---\n#> Signif. codes:  \n#> 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> Residual standard error: 234 on 396 degrees of freedom\n#> Multiple R-squared:  0.743,  Adjusted R-squared:  0.7411 \n#> F-statistic: 381.6 on 3 and 396 DF,  p-value: < 2.2e-16"},{"path":"deeper-linear-regression.html","id":"p-values","chapter":"17 Deeper Linear Regression","heading":"17.1.1 P-Values","text":"p-value model helps us either prove disprove null-hypothesis test. case class, null-hypothesis relationship variables using make predictions actual variable predicting. words, smaller p-value higher level significance variables. run summary linear regression model give multiple p-values.First, coefficients, listed variable. can help us optimize model can see variables helping make model accurate versus may hindering performance. Also notice asterisks next p-values. R kindly puts three stars next variable help us visually tell significant, essentially stars means lower p-value thus higher correlation.\nsecond place see p-value bottom summary. p-value give us overall correlation exists model. see case, p-values model < .00000000000000022, tiny number frankly great p-value. Typically want p-value .05 smaller. p-value .05 tells us confidence level 95%.","code":""},{"path":"deeper-linear-regression.html","id":"multiple-r-squared","chapter":"17 Deeper Linear Regression","heading":"17.1.2 Multiple R-Squared","text":"R-squared tells us well model explains variance variable. words, reason change independent variable actually due model’s prediction? higher r-squared, accurate model better data fits . maximum value r-squared can 1.model’s case, multiple r-squared .743, means model approximately 74.3% accurate amount variance data caused dependent variable. r-squared certainly better. fact, real world typically aiming r-squared .9 .95, means 90%-95% accuracy.","code":""},{"path":"deeper-linear-regression.html","id":"applying-the-model-to-make-predictions","chapter":"17 Deeper Linear Regression","heading":"17.2 Applying the Model to Make Predictions","text":"type regression refereed linear reason. visualize model quadratic plane, see line best fit travel along data. means can simplify model fit slope-intercept equation:y = m(x)+bIn case slope line related independent variables. sum slopes give us overall slope line intercept provided equation summary. modify equation applicable situation get something like :y = m1x1 + m2x2 … + bLet’s look back example model beforeWe see limit variable estimate 1.718e-01, slope. dealing quantitative variables, simply multiply slope intended independent variable. , wanted find balance someone limit 400, multiply 1.718e-01 400.qualitative variables, case ethnicity, multiply estimate TRUE values 1 FALSE values 0, thus cancelling FALSE values .Let’s look example. used equation predict balance someone Caucasian credit limit 500, equation set :, according model customer balance -208.09. number may seem funny, keep mind r-squared best model making inaccurate ethnicity customer highly correlated balance. facts may cause prediction . actually creating model predict balance, want look correlated variables data set.","code":"\nM1 <- lm(Balance ~ Limit + Ethnicity)\nsummary(M1)\n#> \n#> Call:\n#> lm(formula = Balance ~ Limit + Ethnicity)\n#> \n#> Residuals:\n#>     Min      1Q  Median      3Q     Max \n#> -677.39 -145.75   -8.75  139.56  776.46 \n#> \n#> Coefficients:\n#>                      Estimate Std. Error t value Pr(>|t|)\n#> (Intercept)        -3.078e+02  3.417e+01  -9.007   <2e-16\n#> Limit               1.718e-01  5.079e-03  33.831   <2e-16\n#> EthnicityAsian      2.835e+01  3.304e+01   0.858    0.391\n#> EthnicityCaucasian  1.381e+01  2.878e+01   0.480    0.632\n#>                       \n#> (Intercept)        ***\n#> Limit              ***\n#> EthnicityAsian        \n#> EthnicityCaucasian    \n#> ---\n#> Signif. codes:  \n#> 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> Residual standard error: 234 on 396 degrees of freedom\n#> Multiple R-squared:  0.743,  Adjusted R-squared:  0.7411 \n#> F-statistic: 381.6 on 3 and 396 DF,  p-value: < 2.2e-16\ny = (1.718e-1*500) + (1.381e+01*1) + (2.835e+01*0) + (-3.078e+02)\ny\n#> [1] -208.09"},{"path":"deeper-linear-regression.html","id":"review-questions-1","chapter":"17 Deeper Linear Regression","heading":"17.3 Review Questions","text":"Create linear model predicting using ISLR data set predicts customer’s credit limit based age, current balance, number cards .Create linear model predicting using ISLR data set predicts customer’s credit limit based age, current balance, number cards .p-value model? tell us?p-value model? tell us?List variables order correlated least. know correlated?List variables order correlated least. know correlated?multiple r-squared model? tell us? good bad?multiple r-squared model? tell us? good bad?credit limit 29 year old 5 cards total balance 1500?credit limit 29 year old 5 cards total balance 1500?Explain following piece code doesExplain following piece code ","code":"\nlibrary(ISLR)\ndata(\"Credit\")\nattach(Credit)\nq1 <- lm(Cards ~ Limit + Balance + Education)"},{"path":"linear-regression-practice.html","id":"linear-regression-practice","chapter":"18 Linear Regression Practice","heading":"18 Linear Regression Practice","text":"","code":""},{"path":"linear-regression-practice.html","id":"your-homework-is-to-watch-these-videos-which-are-posted-under-the-linear-regression-header-on-brightspace-and-then-do-the-following-homework","chapter":"18 Linear Regression Practice","heading":"18.1 Your homework is to watch these videos which are posted under the linear regression header on Brightspace and then do the following homework:","text":"","code":""},{"path":"linear-regression-practice.html","id":"videos-to-watch","chapter":"18 Linear Regression Practice","heading":"18.1.1 Videos to watch:","text":"Linear regression womenBest fit line women","code":""},{"path":"linear-regression-practice.html","id":"problems","chapter":"18 Linear Regression Practice","heading":"18.2 Problems","text":"watched videos, can refer often like, please answer following:Use linear regression predict weight woman 100 inches tall.Use linear regression predict height woman weighs 200 pounds.Use linear regression predict height woman weighs 5 pounds.Use linear regression predict weight woman 200 inches tall.Plot weight X axes height y-axes create best fit line plot.Plot height y-axes wait X axes create best fit line plot.Add another column women dataframe called GPA 15 numbers: 1.5,4,2,3.7,4,1, 3, 2.5, 3.8, 0.8, 2, 4, 1, 3, 2.Use GPA predict height. GPA significant predictor know? Draw best fit line relationship.Use GPA predict weight. GPA significant predictor know? Draw bested line relationship, .Predict height person GPA 4.0.","code":""},{"path":"linear-regression-practice.html","id":"multivariate-regression","chapter":"18 Linear Regression Practice","heading":"18.3 Multivariate Regression","text":"posted short video walking perform multiple linear regression – one variable predicting another.Using data set mtcars data set:variable predicts miles per gallon better gear qsec? can tell?two variables four (qsec, vs, , gear) together best predict miles per gallon?Using number cylinders, displacement, weight mpg predict car displacement 400 inches, eight cylinders, weighing 2000 pounds?able explain model variables significantly significant.able explain adjusted R squared means.","code":""},{"path":"filters-and-packages.html","id":"filters-and-packages","chapter":"19 Filters and packages","heading":"19 Filters and packages","text":"Filtering data one basic operation work data. want remove part data invalid simply ’re interested . , want zero particular part data want know aboutFor example, randu dataset, many y variables greater 0.5? 0.6?randu dataset, many z variables greater 0.9? Less 0.1? Greater 0.9 less 0.1?","code":"\nlength(randu$y[randu$y>0.5])\n#> [1] 191\nnew.randu <- randu$y[randu$y>0.6]\nhead(new.randu)\n#> [1] 0.873416 0.648545 0.826873 0.926590 0.741526 0.846041\nlength(new.randu)\n#> [1] 161\nlength(randu$z[randu$z>0.9])\n#> [1] 29\nlength(randu$z[randu$z<0.1])\n#> [1] 37"},{"path":"filters-and-packages.html","id":"r-packages","chapter":"19 Filters and packages","heading":"19.1 R packages","text":"Wikipedia, free encyclopedia, fount knowledgeR packages extensions R statistical programming language. R packages contain code, data, documentation standardised collection format can installed users R, typically via centralised software repository CRAN (Comprehensive R Archive Network).large number packages available R, ease installing using , cited major factor driving widespread adoption language data science.","code":""},{"path":"filters-and-packages.html","id":"you-can-install-the-latest-released-version-from-cran-with","chapter":"19 Filters and packages","heading":"19.2 You can install the latest released version from CRAN with:","text":"install.packages(\"dplyr\")","code":""},{"path":"filters-and-packages.html","id":"in-rstudio","chapter":"19 Filters and packages","heading":"19.3 In RStudio","text":"Installing PackagesOpen RStudio. …lower-right pane RStudio, select Packages tab Install button.Type name packages installed “Packages (separate multiple packages space comma):” box. …Press Install .","code":""},{"path":"filters-and-packages.html","id":"check-this-out","chapter":"19 Filters and packages","heading":"19.4 Check this out","text":"dplyr linkhttps://dplyr.tidyverse.org/","code":""},{"path":"dplyr.html","id":"dplyr","chapter":"20 DPLYR","heading":"20 DPLYR","text":"","code":""},{"path":"dplyr.html","id":"introduction-3","chapter":"20 DPLYR","heading":"20.1 Introduction","text":"help PLEASE check Introduction dplyr introducing key functionality dplyr package.life change. better, even.","code":""},{"path":"dplyr.html","id":"a-neat-resource","chapter":"20 DPLYR","heading":"20.2 A Neat Resource","text":"RStudio’s Data Wrangling Cheat Sheet dplyr tidyr","code":""},{"path":"dplyr.html","id":"single-table-verbs","chapter":"20 DPLYR","heading":"20.3 Single table verbs","text":"dplyr aims provide function basic verb data manipulation. verbs can organised three categories based component dataset work :Rows:filter() chooses rows based column values.slice() chooses rows based location.arrange() changes order rows.Columns:select() changes whether column included.rename() changes name columns.\nmutate() changes values columns creates new columns.relocate() changes order columns.\nGroups rows:summarise() collapses group single row. ’s useful learn group_by() verb .","code":""},{"path":"dplyr.html","id":"the-pipe","chapter":"20 DPLYR","heading":"20.4 The pipe","text":"dplyr functions take data frame (tibble) first argument. Rather forcing user either save intermediate objects nest functions, dplyr provides %>% operator magrittr. x %>% f(y) turns f(x, y) result one step “piped” next step. can use pipe rewrite multiple operations can read left--right, top--bottom (reading pipe operator “”).: %>%?","code":""},{"path":"dplyr.html","id":"loading-dplyr-and-the-starwars-dataset","chapter":"20 DPLYR","heading":"20.5 Loading dplyr and the starwars dataset","text":"","code":"\n# You should already have done this but you'll need it\ninstall.packages(\"dplyr\")\nlibrary(dplyr)\n\nstarwars %>% \n  filter(species == \"Droid\")\n#> # A tibble: 6 x 14\n#>   name   height  mass hair_color skin_color  eye_color\n#>   <chr>   <int> <dbl> <chr>      <chr>       <chr>    \n#> 1 C-3PO     167    75 <NA>       gold        yellow   \n#> 2 R2-D2      96    32 <NA>       white, blue red      \n#> 3 R5-D4      97    32 <NA>       white, red  red      \n#> 4 IG-88     200   140 none       metal       red      \n#> 5 R4-P17     96    NA none       silver, red red, blue\n#> 6 BB8        NA    NA none       none        black    \n#> # ... with 8 more variables: birth_year <dbl>, sex <chr>,\n#> #   gender <chr>, homeworld <chr>, species <chr>,\n#> #   films <list>, vehicles <list>, starships <list>\n\n\nstarwars %>% \n  select(name, ends_with(\"color\"))\n#> # A tibble: 87 x 4\n#>    name               hair_color    skin_color  eye_color\n#>    <chr>              <chr>         <chr>       <chr>    \n#>  1 Luke Skywalker     blond         fair        blue     \n#>  2 C-3PO              <NA>          gold        yellow   \n#>  3 R2-D2              <NA>          white, blue red      \n#>  4 Darth Vader        none          white       yellow   \n#>  5 Leia Organa        brown         light       brown    \n#>  6 Owen Lars          brown, grey   light       blue     \n#>  7 Beru Whitesun lars brown         light       blue     \n#>  8 R5-D4              <NA>          white, red  red      \n#>  9 Biggs Darklighter  black         light       brown    \n#> 10 Obi-Wan Kenobi     auburn, white fair        blue-gray\n#> # ... with 77 more rows\n\n\nstarwars %>% \n  mutate(name, bmi = mass / ((height / 100)  ^ 2)) %>%\n  select(name:mass, bmi)\n#> # A tibble: 87 x 4\n#>    name               height  mass   bmi\n#>    <chr>               <int> <dbl> <dbl>\n#>  1 Luke Skywalker        172    77  26.0\n#>  2 C-3PO                 167    75  26.9\n#>  3 R2-D2                  96    32  34.7\n#>  4 Darth Vader           202   136  33.3\n#>  5 Leia Organa           150    49  21.8\n#>  6 Owen Lars             178   120  37.9\n#>  7 Beru Whitesun lars    165    75  27.5\n#>  8 R5-D4                  97    32  34.0\n#>  9 Biggs Darklighter     183    84  25.1\n#> 10 Obi-Wan Kenobi        182    77  23.2\n#> # ... with 77 more rows\n\n\nstarwars %>% \n  arrange(desc(mass))\n#> # A tibble: 87 x 14\n#>    name       height  mass hair_color skin_color  eye_color \n#>    <chr>       <int> <dbl> <chr>      <chr>       <chr>     \n#>  1 Jabba Des~    175  1358 <NA>       green-tan,~ orange    \n#>  2 Grievous      216   159 none       brown, whi~ green, ye~\n#>  3 IG-88         200   140 none       metal       red       \n#>  4 Darth Vad~    202   136 none       white       yellow    \n#>  5 Tarfful       234   136 brown      brown       blue      \n#>  6 Owen Lars     178   120 brown, gr~ light       blue      \n#>  7 Bossk         190   113 none       green       red       \n#>  8 Chewbacca     228   112 brown      unknown     blue      \n#>  9 Jek Tono ~    180   110 brown      fair        blue      \n#> 10 Dexter Je~    198   102 none       brown       yellow    \n#> # ... with 77 more rows, and 8 more variables:\n#> #   birth_year <dbl>, sex <chr>, gender <chr>,\n#> #   homeworld <chr>, species <chr>, films <list>,\n#> #   vehicles <list>, starships <list>\n\nstarwars %>%\n  group_by(species) %>%\n  summarise(\n    n = n(),\n    mass = mean(mass, na.rm = TRUE)\n  ) %>%\n  filter(\n    n > 1,\n    mass > 50\n  )\n#> # A tibble: 8 x 3\n#>   species      n  mass\n#>   <chr>    <int> <dbl>\n#> 1 Droid        6  69.8\n#> 2 Gungan       3  74  \n#> 3 Human       35  82.8\n#> 4 Kaminoan     2  88  \n#> 5 Mirialan     2  53.1\n#> 6 Twi'lek      2  55  \n#> 7 Wookiee      2 124  \n#> 8 Zabrak       2  80"},{"path":"starwars-excercises.html","id":"starwars-excercises","chapter":"21 starwars Excercises","heading":"21 starwars Excercises","text":"Please use starwars dataset dplyr package answer following questions:may humans dataset?many characters taller 89 cm?many characters taller 37 inches?many characters taller 37 inches weigh 55 pounds?many characters human droid?many characters human droid taller 47 inches?species individuals included data set?species tallest individuals average?tallest individual species?Calculate BMI individual determine individual highest BMI. Use formula bmi = mass/((height/100)^2) calculate bmi.homeworld individuals included data set?homeworld tallest individuals average?tallest individual eye color?","code":""},{"path":"loading-dplyr-and-the-nycflights13-dataset.html","id":"loading-dplyr-and-the-nycflights13-dataset","chapter":"22 Loading dplyr and the nycflights13 dataset","heading":"22 Loading dplyr and the nycflights13 dataset","text":"","code":"\n# load packages\nsuppressMessages(library(dplyr))\nlibrary(nycflights13)\n\n# print the flights dataset from nycflights13\nhead(flights)\n#> # A tibble: 6 x 19\n#>    year month   day dep_time sched_dep_time dep_delay\n#>   <int> <int> <int>    <int>          <int>     <dbl>\n#> 1  2013     1     1      517            515         2\n#> 2  2013     1     1      533            529         4\n#> 3  2013     1     1      542            540         2\n#> 4  2013     1     1      544            545        -1\n#> 5  2013     1     1      554            600        -6\n#> 6  2013     1     1      554            558        -4\n#> # ... with 13 more variables: arr_time <int>,\n#> #   sched_arr_time <int>, arr_delay <dbl>, carrier <chr>,\n#> #   flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#> #   air_time <dbl>, distance <dbl>, hour <dbl>,\n#> #   minute <dbl>, time_hour <dttm>"},{"path":"loading-dplyr-and-the-nycflights13-dataset.html","id":"choosing-columns-select-rename","chapter":"22 Loading dplyr and the nycflights13 dataset","heading":"22.1 Choosing columns: select, rename","text":"","code":"\n# besides just using select() to pick columns...\nflights %>% select(carrier, flight)\n#> # A tibble: 336,776 x 2\n#>    carrier flight\n#>    <chr>    <int>\n#>  1 UA        1545\n#>  2 UA        1714\n#>  3 AA        1141\n#>  4 B6         725\n#>  5 DL         461\n#>  6 UA        1696\n#>  7 B6         507\n#>  8 EV        5708\n#>  9 B6          79\n#> 10 AA         301\n#> # ... with 336,766 more rows\n\n# ...you can use the minus sign to hide columns\nflights %>% select(-month, -day)\n#> # A tibble: 336,776 x 17\n#>     year dep_time sched_dep_time dep_delay arr_time\n#>    <int>    <int>          <int>     <dbl>    <int>\n#>  1  2013      517            515         2      830\n#>  2  2013      533            529         4      850\n#>  3  2013      542            540         2      923\n#>  4  2013      544            545        -1     1004\n#>  5  2013      554            600        -6      812\n#>  6  2013      554            558        -4      740\n#>  7  2013      555            600        -5      913\n#>  8  2013      557            600        -3      709\n#>  9  2013      557            600        -3      838\n#> 10  2013      558            600        -2      753\n#> # ... with 336,766 more rows, and 12 more variables:\n#> #   sched_arr_time <int>, arr_delay <dbl>, carrier <chr>,\n#> #   flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#> #   air_time <dbl>, distance <dbl>, hour <dbl>,\n#> #   minute <dbl>, time_hour <dttm>\n# hide a range of columns\nflights %>% select(-(dep_time:arr_delay))\n\n# hide any column with a matching name\nflights %>% select(-contains(\"time\"))\n# pick columns using a character vector of column names\ncols <- c(\"carrier\", \"flight\", \"tailnum\")\nflights %>% select(one_of(cols))\n#> # A tibble: 336,776 x 3\n#>    carrier flight tailnum\n#>    <chr>    <int> <chr>  \n#>  1 UA        1545 N14228 \n#>  2 UA        1714 N24211 \n#>  3 AA        1141 N619AA \n#>  4 B6         725 N804JB \n#>  5 DL         461 N668DN \n#>  6 UA        1696 N39463 \n#>  7 B6         507 N516JB \n#>  8 EV        5708 N829AS \n#>  9 B6          79 N593JB \n#> 10 AA         301 N3ALAA \n#> # ... with 336,766 more rows\n# select() can be used to rename columns, though all columns not mentioned are dropped\nflights %>% select(tail = tailnum)\n#> # A tibble: 336,776 x 1\n#>    tail  \n#>    <chr> \n#>  1 N14228\n#>  2 N24211\n#>  3 N619AA\n#>  4 N804JB\n#>  5 N668DN\n#>  6 N39463\n#>  7 N516JB\n#>  8 N829AS\n#>  9 N593JB\n#> 10 N3ALAA\n#> # ... with 336,766 more rows\n\n# rename() does the same thing, except all columns not mentioned are kept\nflights %>% rename(tail = tailnum)\n#> # A tibble: 336,776 x 19\n#>     year month   day dep_time sched_dep_time dep_delay\n#>    <int> <int> <int>    <int>          <int>     <dbl>\n#>  1  2013     1     1      517            515         2\n#>  2  2013     1     1      533            529         4\n#>  3  2013     1     1      542            540         2\n#>  4  2013     1     1      544            545        -1\n#>  5  2013     1     1      554            600        -6\n#>  6  2013     1     1      554            558        -4\n#>  7  2013     1     1      555            600        -5\n#>  8  2013     1     1      557            600        -3\n#>  9  2013     1     1      557            600        -3\n#> 10  2013     1     1      558            600        -2\n#> # ... with 336,766 more rows, and 13 more variables:\n#> #   arr_time <int>, sched_arr_time <int>, arr_delay <dbl>,\n#> #   carrier <chr>, flight <int>, tail <chr>, origin <chr>,\n#> #   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#> #   minute <dbl>, time_hour <dttm>"},{"path":"loading-dplyr-and-the-nycflights13-dataset.html","id":"choosing-rows-filter-between-slice-sample_n-top_n-distinct","chapter":"22 Loading dplyr and the nycflights13 dataset","heading":"22.2 Choosing rows: filter, between, slice, sample_n, top_n, distinct","text":"","code":"\n# filter() supports the use of multiple conditions\nflights %>% filter(dep_time >= 600, dep_time <= 605)\n#> # A tibble: 2,460 x 19\n#>     year month   day dep_time sched_dep_time dep_delay\n#>    <int> <int> <int>    <int>          <int>     <dbl>\n#>  1  2013     1     1      600            600         0\n#>  2  2013     1     1      600            600         0\n#>  3  2013     1     1      601            600         1\n#>  4  2013     1     1      602            610        -8\n#>  5  2013     1     1      602            605        -3\n#>  6  2013     1     2      600            600         0\n#>  7  2013     1     2      600            605        -5\n#>  8  2013     1     2      600            600         0\n#>  9  2013     1     2      600            600         0\n#> 10  2013     1     2      600            600         0\n#> # ... with 2,450 more rows, and 13 more variables:\n#> #   arr_time <int>, sched_arr_time <int>, arr_delay <dbl>,\n#> #   carrier <chr>, flight <int>, tailnum <chr>,\n#> #   origin <chr>, dest <chr>, air_time <dbl>,\n#> #   distance <dbl>, hour <dbl>, minute <dbl>,\n#> #   time_hour <dttm>\n# between() is a concise alternative for determing if numeric values fall in a range\nflights %>% filter(between(dep_time, 600, 605))\n\n# side note: is.na() can also be useful when filtering\nflights %>% filter(!is.na(dep_time))\n# slice() filters rows by position\nflights %>% slice(1000:1005)\n#> # A tibble: 6 x 19\n#>    year month   day dep_time sched_dep_time dep_delay\n#>   <int> <int> <int>    <int>          <int>     <dbl>\n#> 1  2013     1     2      809            810        -1\n#> 2  2013     1     2      810            800        10\n#> 3  2013     1     2      811            815        -4\n#> 4  2013     1     2      811            815        -4\n#> 5  2013     1     2      811            820        -9\n#> 6  2013     1     2      815            815         0\n#> # ... with 13 more variables: arr_time <int>,\n#> #   sched_arr_time <int>, arr_delay <dbl>, carrier <chr>,\n#> #   flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#> #   air_time <dbl>, distance <dbl>, hour <dbl>,\n#> #   minute <dbl>, time_hour <dttm>\n\n# keep the first three rows within each group\nflights %>% group_by(month, day) %>% slice(1:3)\n#> # A tibble: 1,095 x 19\n#> # Groups:   month, day [365]\n#>     year month   day dep_time sched_dep_time dep_delay\n#>    <int> <int> <int>    <int>          <int>     <dbl>\n#>  1  2013     1     1      517            515         2\n#>  2  2013     1     1      533            529         4\n#>  3  2013     1     1      542            540         2\n#>  4  2013     1     2       42           2359        43\n#>  5  2013     1     2      126           2250       156\n#>  6  2013     1     2      458            500        -2\n#>  7  2013     1     3       32           2359        33\n#>  8  2013     1     3       50           2145       185\n#>  9  2013     1     3      235           2359       156\n#> 10  2013     1     4       25           2359        26\n#> # ... with 1,085 more rows, and 13 more variables:\n#> #   arr_time <int>, sched_arr_time <int>, arr_delay <dbl>,\n#> #   carrier <chr>, flight <int>, tailnum <chr>,\n#> #   origin <chr>, dest <chr>, air_time <dbl>,\n#> #   distance <dbl>, hour <dbl>, minute <dbl>,\n#> #   time_hour <dttm>\n\n# sample three rows from each group\nflights %>% group_by(month, day) %>% sample_n(3)\n#> # A tibble: 1,095 x 19\n#> # Groups:   month, day [365]\n#>     year month   day dep_time sched_dep_time dep_delay\n#>    <int> <int> <int>    <int>          <int>     <dbl>\n#>  1  2013     1     1     1534           1530         4\n#>  2  2013     1     1     1458           1500        -2\n#>  3  2013     1     1     2037           2010        27\n#>  4  2013     1     2     2351           2359        -8\n#>  5  2013     1     2     1450           1450         0\n#>  6  2013     1     2     1749           1654        55\n#>  7  2013     1     3      629            633        -4\n#>  8  2013     1     3     1630           1630         0\n#>  9  2013     1     3     1515           1520        -5\n#> 10  2013     1     4     1733           1703        30\n#> # ... with 1,085 more rows, and 13 more variables:\n#> #   arr_time <int>, sched_arr_time <int>, arr_delay <dbl>,\n#> #   carrier <chr>, flight <int>, tailnum <chr>,\n#> #   origin <chr>, dest <chr>, air_time <dbl>,\n#> #   distance <dbl>, hour <dbl>, minute <dbl>,\n#> #   time_hour <dttm>\n\n# keep three rows from each group with the top dep_delay\nflights %>% group_by(month, day) %>% top_n(3, dep_delay)\n#> # A tibble: 1,108 x 19\n#> # Groups:   month, day [365]\n#>     year month   day dep_time sched_dep_time dep_delay\n#>    <int> <int> <int>    <int>          <int>     <dbl>\n#>  1  2013     1     1      848           1835       853\n#>  2  2013     1     1     1815           1325       290\n#>  3  2013     1     1     2343           1724       379\n#>  4  2013     1     2     1412            838       334\n#>  5  2013     1     2     1607           1030       337\n#>  6  2013     1     2     2131           1512       379\n#>  7  2013     1     3     2008           1540       268\n#>  8  2013     1     3     2012           1600       252\n#>  9  2013     1     3     2056           1605       291\n#> 10  2013     1     4     2058           1730       208\n#> # ... with 1,098 more rows, and 13 more variables:\n#> #   arr_time <int>, sched_arr_time <int>, arr_delay <dbl>,\n#> #   carrier <chr>, flight <int>, tailnum <chr>,\n#> #   origin <chr>, dest <chr>, air_time <dbl>,\n#> #   distance <dbl>, hour <dbl>, minute <dbl>,\n#> #   time_hour <dttm>\n\n# also sort by dep_delay within each group\nflights %>% group_by(month, day) %>% top_n(3, dep_delay) %>% arrange(desc(dep_delay))\n#> # A tibble: 1,108 x 19\n#> # Groups:   month, day [365]\n#>     year month   day dep_time sched_dep_time dep_delay\n#>    <int> <int> <int>    <int>          <int>     <dbl>\n#>  1  2013     1     9      641            900      1301\n#>  2  2013     6    15     1432           1935      1137\n#>  3  2013     1    10     1121           1635      1126\n#>  4  2013     9    20     1139           1845      1014\n#>  5  2013     7    22      845           1600      1005\n#>  6  2013     4    10     1100           1900       960\n#>  7  2013     3    17     2321            810       911\n#>  8  2013     6    27      959           1900       899\n#>  9  2013     7    22     2257            759       898\n#> 10  2013    12     5      756           1700       896\n#> # ... with 1,098 more rows, and 13 more variables:\n#> #   arr_time <int>, sched_arr_time <int>, arr_delay <dbl>,\n#> #   carrier <chr>, flight <int>, tailnum <chr>,\n#> #   origin <chr>, dest <chr>, air_time <dbl>,\n#> #   distance <dbl>, hour <dbl>, minute <dbl>,\n#> #   time_hour <dttm>\n# unique rows can be identified using unique() from base R\nflights %>% select(origin, dest) %>% unique()\n#> # A tibble: 224 x 2\n#>    origin dest \n#>    <chr>  <chr>\n#>  1 EWR    IAH  \n#>  2 LGA    IAH  \n#>  3 JFK    MIA  \n#>  4 JFK    BQN  \n#>  5 LGA    ATL  \n#>  6 EWR    ORD  \n#>  7 EWR    FLL  \n#>  8 LGA    IAD  \n#>  9 JFK    MCO  \n#> 10 LGA    ORD  \n#> # ... with 214 more rows\n# dplyr provides an alternative that is more \"efficient\"\nflights %>% select(origin, dest) %>% distinct()\n\n# side note: when chaining, you don't have to include the parentheses if there are no arguments\nflights %>% select(origin, dest) %>% distinct"},{"path":"loading-dplyr-and-the-nycflights13-dataset.html","id":"excercies","chapter":"22 Loading dplyr and the nycflights13 dataset","heading":"22.3 Excercies","text":"Using nycflights13 dataset dplyr package, answer questions. answers given square brackets check answers.many flights Sept late departing flights? [7815]many flights Sept late departing flights originated JFK airport? [2649]many flights Sept late departing flights origin JFK airport destination anywhere except MIA? [2572]carrier flights data set? [UA 58665]destination flights data set? [ORD 17283]destination flights departure delays greater 60 minutes data set? [ORD 1480]longest arrival delay dataset? [1272]carrier September late departing flights? [UA 1559]Create variable called total.annoyance arrival delay plus departure delay flight.carrier 10 flights September greatest % late departing flights?","code":""},{"path":"loading-dplyr-and-the-nycflights13-dataset.html","id":"adding-new-variables-mutate-transmute-add_rownames","chapter":"22 Loading dplyr and the nycflights13 dataset","heading":"22.4 Adding new variables: mutate, transmute, add_rownames","text":"","code":"\n# mutate() creates a new variable (and keeps all existing variables)\nflights %>% mutate(speed = distance/air_time*60)\n#> # A tibble: 336,776 x 20\n#>     year month   day dep_time sched_dep_time dep_delay\n#>    <int> <int> <int>    <int>          <int>     <dbl>\n#>  1  2013     1     1      517            515         2\n#>  2  2013     1     1      533            529         4\n#>  3  2013     1     1      542            540         2\n#>  4  2013     1     1      544            545        -1\n#>  5  2013     1     1      554            600        -6\n#>  6  2013     1     1      554            558        -4\n#>  7  2013     1     1      555            600        -5\n#>  8  2013     1     1      557            600        -3\n#>  9  2013     1     1      557            600        -3\n#> 10  2013     1     1      558            600        -2\n#> # ... with 336,766 more rows, and 14 more variables:\n#> #   arr_time <int>, sched_arr_time <int>, arr_delay <dbl>,\n#> #   carrier <chr>, flight <int>, tailnum <chr>,\n#> #   origin <chr>, dest <chr>, air_time <dbl>,\n#> #   distance <dbl>, hour <dbl>, minute <dbl>,\n#> #   time_hour <dttm>, speed <dbl>\n\n# transmute() only keeps the new variables\nflights %>% transmute(speed = distance/air_time*60)\n#> # A tibble: 336,776 x 1\n#>    speed\n#>    <dbl>\n#>  1  370.\n#>  2  374.\n#>  3  408.\n#>  4  517.\n#>  5  394.\n#>  6  288.\n#>  7  404.\n#>  8  259.\n#>  9  405.\n#> 10  319.\n#> # ... with 336,766 more rows\n# example data frame with row names\nmtcars %>% head()\n#>                    mpg cyl disp  hp drat    wt  qsec vs am\n#> Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1\n#> Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1\n#> Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1\n#> Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0\n#> Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0\n#> Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0\n#>                   gear carb\n#> Mazda RX4            4    4\n#> Mazda RX4 Wag        4    4\n#> Datsun 710           4    1\n#> Hornet 4 Drive       3    1\n#> Hornet Sportabout    3    2\n#> Valiant              3    1\n\n# add_rownames() turns row names into an explicit variable\nmtcars %>% add_rownames(\"model\") %>% head()\n#> Warning: `add_rownames()` was deprecated in dplyr 1.0.0.\n#> Please use `tibble::rownames_to_column()` instead.\n#> This warning is displayed once every 8 hours.\n#> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated.\n#> # A tibble: 6 x 12\n#>   model        mpg   cyl  disp    hp  drat    wt  qsec    vs\n#>   <chr>      <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n#> 1 Mazda RX4   21       6   160   110  3.9   2.62  16.5     0\n#> 2 Mazda RX4~  21       6   160   110  3.9   2.88  17.0     0\n#> 3 Datsun 710  22.8     4   108    93  3.85  2.32  18.6     1\n#> 4 Hornet 4 ~  21.4     6   258   110  3.08  3.22  19.4     1\n#> 5 Hornet Sp~  18.7     8   360   175  3.15  3.44  17.0     0\n#> 6 Valiant     18.1     6   225   105  2.76  3.46  20.2     1\n#> # ... with 3 more variables: am <dbl>, gear <dbl>,\n#> #   carb <dbl>\n\n# side note: dplyr no longer prints row names (ever) for local data frames\nmtcars %>% tbl_df()\n#> Warning: `tbl_df()` was deprecated in dplyr 1.0.0.\n#> Please use `tibble::as_tibble()` instead.\n#> This warning is displayed once every 8 hours.\n#> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated.\n#> # A tibble: 32 x 11\n#>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am\n#>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n#>  1  21       6  160    110  3.9   2.62  16.5     0     1\n#>  2  21       6  160    110  3.9   2.88  17.0     0     1\n#>  3  22.8     4  108     93  3.85  2.32  18.6     1     1\n#>  4  21.4     6  258    110  3.08  3.22  19.4     1     0\n#>  5  18.7     8  360    175  3.15  3.44  17.0     0     0\n#>  6  18.1     6  225    105  2.76  3.46  20.2     1     0\n#>  7  14.3     8  360    245  3.21  3.57  15.8     0     0\n#>  8  24.4     4  147.    62  3.69  3.19  20       1     0\n#>  9  22.8     4  141.    95  3.92  3.15  22.9     1     0\n#> 10  19.2     6  168.   123  3.92  3.44  18.3     1     0\n#> # ... with 22 more rows, and 2 more variables: gear <dbl>,\n#> #   carb <dbl>"},{"path":"grouping-and-counting-summarise-tally-count-group_size-n_groups-ungroup.html","id":"grouping-and-counting-summarise-tally-count-group_size-n_groups-ungroup","chapter":"23 Grouping and counting: summarise, tally, count, group_size, n_groups, ungroup","heading":"23 Grouping and counting: summarise, tally, count, group_size, n_groups, ungroup","text":"","code":"\n# summarise() can be used to count the number of rows in each group\nflights %>% group_by(month) %>% summarise(cnt = n())\n#> # A tibble: 12 x 2\n#>    month   cnt\n#>    <int> <int>\n#>  1     1 27004\n#>  2     2 24951\n#>  3     3 28834\n#>  4     4 28330\n#>  5     5 28796\n#>  6     6 28243\n#>  7     7 29425\n#>  8     8 29327\n#>  9     9 27574\n#> 10    10 28889\n#> 11    11 27268\n#> 12    12 28135\n# tally() and count() can do this more concisely\nflights %>% group_by(month) %>% tally()\nflights %>% count(month)\n# you can sort by the count\nflights %>% group_by(month) %>% summarise(cnt = n()) %>% arrange(desc(cnt))\n#> # A tibble: 12 x 2\n#>    month   cnt\n#>    <int> <int>\n#>  1     7 29425\n#>  2     8 29327\n#>  3    10 28889\n#>  4     3 28834\n#>  5     5 28796\n#>  6     4 28330\n#>  7     6 28243\n#>  8    12 28135\n#>  9     9 27574\n#> 10    11 27268\n#> 11     1 27004\n#> 12     2 24951\n# tally() and count() have a sort parameter for this purpose\nflights %>% group_by(month) %>% tally(sort=TRUE)\nflights %>% count(month, sort=TRUE)\n# you can sum over a specific variable instead of simply counting rows\nflights %>% group_by(month) %>% summarise(dist = sum(distance))\n#> # A tibble: 12 x 2\n#>    month     dist\n#>    <int>    <dbl>\n#>  1     1 27188805\n#>  2     2 24975509\n#>  3     3 29179636\n#>  4     4 29427294\n#>  5     5 29974128\n#>  6     6 29856388\n#>  7     7 31149199\n#>  8     8 31149334\n#>  9     9 28711426\n#> 10    10 30012086\n#> 11    11 28639718\n#> 12    12 29954084\n# tally() and count() have a wt parameter for this purpose\nflights %>% group_by(month) %>% tally(wt = distance)\nflights %>% count(month, wt = distance)\n# group_size() returns the counts as a vector\nflights %>% group_by(month) %>% group_size()\n#>  [1] 27004 24951 28834 28330 28796 28243 29425 29327 27574\n#> [10] 28889 27268 28135\n\n# n_groups() simply reports the number of groups\nflights %>% group_by(month) %>% n_groups()\n#> [1] 12\n# group by two variables, summarise, arrange (output is possibly confusing)\nflights %>% group_by(month, day) %>% summarise(cnt = n()) %>% arrange(desc(cnt)) %>% print(n = 40)\n#> `summarise()` has grouped output by 'month'. You can override using the `.groups` argument.\n#> # A tibble: 365 x 3\n#> # Groups:   month [12]\n#>    month   day   cnt\n#>    <int> <int> <int>\n#>  1    11    27  1014\n#>  2     7    11  1006\n#>  3     7     8  1004\n#>  4     7    10  1004\n#>  5    12     2  1004\n#>  6     7    18  1003\n#>  7     7    25  1003\n#>  8     7    12  1002\n#>  9     7     9  1001\n#> 10     7    17  1001\n#> 11     7    31  1001\n#> 12     8     7  1001\n#> 13     8     8  1001\n#> 14     8    12  1001\n#> 15     7    22  1000\n#> 16     7    24  1000\n#> 17     8     1  1000\n#> 18     8     5  1000\n#> 19     8    15  1000\n#> 20    11    21  1000\n#> 21     7    15   999\n#> 22     7    19   999\n#> 23     7    26   999\n#> 24     7    29   999\n#> 25     8     2   999\n#> 26     8     9   999\n#> 27    11    22   999\n#> 28     8    16   998\n#> 29     7    23   997\n#> 30     7    30   997\n#> 31     8    14   997\n#> 32     7    16   996\n#> 33     8     6   996\n#> 34     8    19   996\n#> 35     9    13   996\n#> 36     9    26   996\n#> 37     9    27   996\n#> 38     4    15   995\n#> 39     6    20   995\n#> 40     6    26   995\n#> # ... with 325 more rows\n\n# ungroup() before arranging to arrange across all groups\nflights %>% group_by(month, day) %>% summarise(cnt = n()) %>% ungroup() %>% arrange(desc(cnt))\n#> `summarise()` has grouped output by 'month'. You can override using the `.groups` argument.\n#> # A tibble: 365 x 3\n#>    month   day   cnt\n#>    <int> <int> <int>\n#>  1    11    27  1014\n#>  2     7    11  1006\n#>  3     7     8  1004\n#>  4     7    10  1004\n#>  5    12     2  1004\n#>  6     7    18  1003\n#>  7     7    25  1003\n#>  8     7    12  1002\n#>  9     7     9  1001\n#> 10     7    17  1001\n#> # ... with 355 more rows"},{"path":"creating-data-frames-data_frame.html","id":"creating-data-frames-data_frame","chapter":"24 Creating data frames: data_frame","heading":"24 Creating data frames: data_frame","text":"data_frame() better way data.frame() creating data frames. Benefits data_frame():can use previously defined columns compute new columns.never coerces column types.never munges column names.never adds row names.recycles length 1 input.returns local data frame (tbl_df).","code":"\n# data_frame() example\ndata_frame(a = 1:6, b = a*2, c = 'string', 'd+e' = 1) %>% glimpse()\n#> Warning: `data_frame()` was deprecated in tibble 1.1.0.\n#> Please use `tibble()` instead.\n#> This warning is displayed once every 8 hours.\n#> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated.\n#> Rows: 6\n#> Columns: 4\n#> $ a     <int> 1, 2, 3, 4, 5, 6\n#> $ b     <dbl> 2, 4, 6, 8, 10, 12\n#> $ c     <chr> \"string\", \"string\", \"string\", \"string\", \"str~\n#> $ `d+e` <dbl> 1, 1, 1, 1, 1, 1\n\n# data.frame() example\ndata.frame(a = 1:6, c = 'string', 'd+e' = 1) %>% glimpse()\n#> Rows: 6\n#> Columns: 3\n#> $ a   <int> 1, 2, 3, 4, 5, 6\n#> $ c   <chr> \"string\", \"string\", \"string\", \"string\", \"strin~\n#> $ d.e <dbl> 1, 1, 1, 1, 1, 1"},{"path":"joining-merging-tables-left_join-right_join-inner_join-full_join-semi_join-anti_join.html","id":"joining-merging-tables-left_join-right_join-inner_join-full_join-semi_join-anti_join","chapter":"25 Joining (merging) tables: left_join, right_join, inner_join, full_join, semi_join, anti_join","heading":"25 Joining (merging) tables: left_join, right_join, inner_join, full_join, semi_join, anti_join","text":"","code":"\n# create two simple data frames\n(a <- data_frame(color = c(\"green\",\"yellow\",\"red\"), num = 1:3))\n#> # A tibble: 3 x 2\n#>   color    num\n#>   <chr>  <int>\n#> 1 green      1\n#> 2 yellow     2\n#> 3 red        3\n(b <- data_frame(color = c(\"green\",\"yellow\",\"pink\"), size = c(\"S\",\"M\",\"L\")))\n#> # A tibble: 3 x 2\n#>   color  size \n#>   <chr>  <chr>\n#> 1 green  S    \n#> 2 yellow M    \n#> 3 pink   L\n\n# only include observations found in both \"a\" and \"b\" (automatically joins on variables that appear in both tables)\ninner_join(a, b)\n#> Joining, by = \"color\"\n#> # A tibble: 2 x 3\n#>   color    num size \n#>   <chr>  <int> <chr>\n#> 1 green      1 S    \n#> 2 yellow     2 M\n\n# include observations found in either \"a\" or \"b\"\nfull_join(a, b)\n#> Joining, by = \"color\"\n#> # A tibble: 4 x 3\n#>   color    num size \n#>   <chr>  <int> <chr>\n#> 1 green      1 S    \n#> 2 yellow     2 M    \n#> 3 red        3 <NA> \n#> 4 pink      NA L\n\n# include all observations found in \"a\"\nleft_join(a, b)\n#> Joining, by = \"color\"\n#> # A tibble: 3 x 3\n#>   color    num size \n#>   <chr>  <int> <chr>\n#> 1 green      1 S    \n#> 2 yellow     2 M    \n#> 3 red        3 <NA>\n\n# include all observations found in \"b\"\nright_join(a, b)\n#> Joining, by = \"color\"\n#> # A tibble: 3 x 3\n#>   color    num size \n#>   <chr>  <int> <chr>\n#> 1 green      1 S    \n#> 2 yellow     2 M    \n#> 3 pink      NA L\n\n# right_join(a, b) is identical to left_join(b, a) except for column ordering\nleft_join(b, a)\n#> Joining, by = \"color\"\n#> # A tibble: 3 x 3\n#>   color  size    num\n#>   <chr>  <chr> <int>\n#> 1 green  S         1\n#> 2 yellow M         2\n#> 3 pink   L        NA\n\n# filter \"a\" to only show observations that match \"b\"\nsemi_join(a, b)\n#> Joining, by = \"color\"\n#> # A tibble: 2 x 2\n#>   color    num\n#>   <chr>  <int>\n#> 1 green      1\n#> 2 yellow     2\n\n# filter \"a\" to only show observations that don't match \"b\"\nanti_join(a, b)\n#> Joining, by = \"color\"\n#> # A tibble: 1 x 2\n#>   color   num\n#>   <chr> <int>\n#> 1 red       3\n# sometimes matching variables don't have identical names\nb <- b %>% rename(col = color)\n\n# specify that the join should occur by matching \"color\" in \"a\" with \"col\" in \"b\"\ninner_join(a, b, by=c(\"color\" = \"col\"))\n#> # A tibble: 2 x 3\n#>   color    num size \n#>   <chr>  <int> <chr>\n#> 1 green      1 S    \n#> 2 yellow     2 M"},{"path":"viewing-more-output-print-view.html","id":"viewing-more-output-print-view","chapter":"26 Viewing more output: print, View","heading":"26 Viewing more output: print, View","text":"","code":"\n# specify that you want to see more rows\nflights %>% print(n = 15)\n#> # A tibble: 336,776 x 19\n#>     year month   day dep_time sched_dep_time dep_delay\n#>    <int> <int> <int>    <int>          <int>     <dbl>\n#>  1  2013     1     1      517            515         2\n#>  2  2013     1     1      533            529         4\n#>  3  2013     1     1      542            540         2\n#>  4  2013     1     1      544            545        -1\n#>  5  2013     1     1      554            600        -6\n#>  6  2013     1     1      554            558        -4\n#>  7  2013     1     1      555            600        -5\n#>  8  2013     1     1      557            600        -3\n#>  9  2013     1     1      557            600        -3\n#> 10  2013     1     1      558            600        -2\n#> 11  2013     1     1      558            600        -2\n#> 12  2013     1     1      558            600        -2\n#> 13  2013     1     1      558            600        -2\n#> 14  2013     1     1      558            600        -2\n#> 15  2013     1     1      559            600        -1\n#> # ... with 336,761 more rows, and 13 more variables:\n#> #   arr_time <int>, sched_arr_time <int>, arr_delay <dbl>,\n#> #   carrier <chr>, flight <int>, tailnum <chr>,\n#> #   origin <chr>, dest <chr>, air_time <dbl>,\n#> #   distance <dbl>, hour <dbl>, minute <dbl>,\n#> #   time_hour <dttm>\n# specify that you want to see ALL rows (don't run this!)\nflights %>% print(n = Inf)\n# specify that you want to see all columns\nflights %>% print(width = Inf)\n#> # A tibble: 336,776 x 19\n#>     year month   day dep_time sched_dep_time dep_delay\n#>    <int> <int> <int>    <int>          <int>     <dbl>\n#>  1  2013     1     1      517            515         2\n#>  2  2013     1     1      533            529         4\n#>  3  2013     1     1      542            540         2\n#>  4  2013     1     1      544            545        -1\n#>  5  2013     1     1      554            600        -6\n#>  6  2013     1     1      554            558        -4\n#>  7  2013     1     1      555            600        -5\n#>  8  2013     1     1      557            600        -3\n#>  9  2013     1     1      557            600        -3\n#> 10  2013     1     1      558            600        -2\n#>    arr_time sched_arr_time arr_delay carrier flight tailnum\n#>       <int>          <int>     <dbl> <chr>    <int> <chr>  \n#>  1      830            819        11 UA        1545 N14228 \n#>  2      850            830        20 UA        1714 N24211 \n#>  3      923            850        33 AA        1141 N619AA \n#>  4     1004           1022       -18 B6         725 N804JB \n#>  5      812            837       -25 DL         461 N668DN \n#>  6      740            728        12 UA        1696 N39463 \n#>  7      913            854        19 B6         507 N516JB \n#>  8      709            723       -14 EV        5708 N829AS \n#>  9      838            846        -8 B6          79 N593JB \n#> 10      753            745         8 AA         301 N3ALAA \n#>    origin dest  air_time distance  hour minute\n#>    <chr>  <chr>    <dbl>    <dbl> <dbl>  <dbl>\n#>  1 EWR    IAH        227     1400     5     15\n#>  2 LGA    IAH        227     1416     5     29\n#>  3 JFK    MIA        160     1089     5     40\n#>  4 JFK    BQN        183     1576     5     45\n#>  5 LGA    ATL        116      762     6      0\n#>  6 EWR    ORD        150      719     5     58\n#>  7 EWR    FLL        158     1065     6      0\n#>  8 LGA    IAD         53      229     6      0\n#>  9 JFK    MCO        140      944     6      0\n#> 10 LGA    ORD        138      733     6      0\n#>    time_hour          \n#>    <dttm>             \n#>  1 2013-01-01 05:00:00\n#>  2 2013-01-01 05:00:00\n#>  3 2013-01-01 05:00:00\n#>  4 2013-01-01 05:00:00\n#>  5 2013-01-01 06:00:00\n#>  6 2013-01-01 05:00:00\n#>  7 2013-01-01 06:00:00\n#>  8 2013-01-01 06:00:00\n#>  9 2013-01-01 06:00:00\n#> 10 2013-01-01 06:00:00\n#> # ... with 336,766 more rows\n# show up to 1000 rows and all columns\nflights %>% View()\n\n# set option to see all columns and fewer rows\noptions(dplyr.width = Inf, dplyr.print_min = 6)\n\n# reset options (or just close R)\noptions(dplyr.width = NULL, dplyr.print_min = 10)"},{"path":"dplyr-excercies.html","id":"dplyr-excercies","chapter":"27 DPLYR Excercies","heading":"27 DPLYR Excercies","text":"Using nycflights13 dataset dplyr package, answer questions. answers given square brackets check answers.many flights Sept late departing flights? [7815]many flights Sept late departing flights originated JFK airport? [2649]many flights Sept late departing flights origin JFK airport destination anywhere except MIA? [2572]carrier flights data set? [UA 58665]destination flights data set? [ORD 17283]destination flights departure delays greater 60 minutes data set? [ORD 1480]longest arrival delay dataset? [1272]carrier September late departing flights? [UA 1559]Create variable called total.annoyance arrival delay plus departure delay flight.carrier 10 flights September greatest % late departing flights?","code":""}]
